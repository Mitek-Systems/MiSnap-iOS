#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef MISNAPASSETMANAGER_SWIFT_H
#define MISNAPASSETMANAGER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MiSnapAssetManager",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Bullet type
typedef SWIFT_ENUM(NSInteger, BulletType, open) {
/// Arrow
  BulletTypeArrow = 0,
/// Circle
  BulletTypeCircle = 1,
/// Square
  BulletTypeSquare = 2,
};

/// Asset style
typedef SWIFT_ENUM(NSInteger, MiSnapAssetStyle, open) {
/// Fill
  MiSnapAssetStyleFill = 0,
/// Stroke
  MiSnapAssetStyleStroke = 1,
};

@class NSCoder;
@class MiSnapBulletViewConfiguration;

/// Bullet view
SWIFT_CLASS("_TtC18MiSnapAssetManager16MiSnapBulletView")
@interface MiSnapBulletView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns <code>MiSnapArrowView</code> with a given configuration
- (nonnull instancetype)initWith:(MiSnapBulletViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UITraitCollection;

@interface MiSnapBulletView (SWIFT_EXTENSION(MiSnapAssetManager))
/// Called when the environment’s traits change.
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end

@class UIColor;
@class NSString;

/// Bullet configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager29MiSnapBulletViewConfiguration")
@interface MiSnapBulletViewConfiguration : NSObject
/// Type
@property (nonatomic) enum BulletType type;
/// Size
@property (nonatomic) CGSize size;
/// Fill color
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/// Stroke color
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
/// Stroke width
@property (nonatomic) CGFloat strokeWidth;
/// Shadow color
/// Default: <code>.clear</code>
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// Shadow offset
/// Default: <code>.zero</code>
@property (nonatomic) CGSize shadowOffset;
/// Shadow radius
/// Default: <code>0.0</code>
@property (nonatomic) CGFloat shadowRadius;
/// Shadow opacity
/// Default: <code>0.0</code>
@property (nonatomic) float shadowOpacity;
/// Indicates whether a view is hidden
@property (nonatomic) BOOL isHidden;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MiSnapViewConfiguration;

/// MiSnap view
/// <ul>
///   <li>
///     See: <code>MiSnapStatelessView</code> and <code>MiSnapStatefulView</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18MiSnapAssetManager10MiSnapView")
@interface MiSnapView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns <code>MiSnapView</code> with a given configuration
- (nonnull instancetype)initWith:(MiSnapViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// MiSnap stateless view
/// Inherits from: <code>MiSnapView</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager19MiSnapStatelessView")
@interface MiSnapStatelessView : MiSnapView
- (nonnull instancetype)initWith:(MiSnapViewConfiguration * _Nullable)configuration SWIFT_UNAVAILABLE;
@end

@class MiSnapCameraShutterViewConfiguration;

/// Camera shutter view
SWIFT_CLASS("_TtC18MiSnapAssetManager23MiSnapCameraShutterView")
@interface MiSnapCameraShutterView : MiSnapStatelessView
/// Creates and returns <code>MiSnapCameraShutterView</code> with an optional configuration
- (nonnull instancetype)initWith:(MiSnapCameraShutterViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
@end

@class MiSnapViewLocation;

/// View configuration
/// <ul>
///   <li>
///     See: <code>MiSnapStatelessViewConfiguration</code> and <code>MiSnapStatefulViewConfiguration</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18MiSnapAssetManager23MiSnapViewConfiguration")
@interface MiSnapViewConfiguration : NSObject
/// Style
/// <ul>
///   <li>
///     See: <code>MiSnapAssetStyle</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapAssetStyle style;
/// Size
@property (nonatomic) CGSize size;
/// Shadow color
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// Shadow offset
@property (nonatomic) CGSize shadowOffset;
/// Shadow opacity
@property (nonatomic) CGFloat shadowOpacity;
/// Indicates whether a view is hidden (in case if a view is a button then additionally indicates whether it’s enabled)
@property (nonatomic) BOOL isHidden;
/// A location configuration for a Portrait orientation
@property (nonatomic, strong) MiSnapViewLocation * _Nonnull locationPortrait;
/// A location configuration for a Landscape orientation
@property (nonatomic, strong) MiSnapViewLocation * _Nonnull locationLandscape;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

/// Stateless view configuration
/// Inherits from: <code>MiSnapViewConfiguration</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager32MiSnapStatelessViewConfiguration")
@interface MiSnapStatelessViewConfiguration : MiSnapViewConfiguration
/// A custom image that should be used instead of a drawn view
@property (nonatomic, strong) UIImage * _Nullable image;
/// An image tint color to apply when an <code>image</code> is set
@property (nonatomic, strong) UIColor * _Nullable imageTintColor;
/// Color
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Cutout fill color
@property (nonatomic, strong) UIColor * _Nullable cutoutFillColor;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Camera shutter view configuration
/// Inherits from: <code>MiSnapStatelessViewConfiguration</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager36MiSnapCameraShutterViewConfiguration")
@interface MiSnapCameraShutterViewConfiguration : MiSnapStatelessViewConfiguration
/// Creates and returns <code>MiSnapCameraShutterViewConfiguration</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MiSnapCancelViewConfiguration;

/// Cancel view
SWIFT_CLASS("_TtC18MiSnapAssetManager16MiSnapCancelView")
@interface MiSnapCancelView : MiSnapStatelessView
/// Creates and returns <code>MiSnapCancelView</code> with an optional configuration
- (nonnull instancetype)initWith:(MiSnapCancelViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
@end


/// Cancel view configuration
/// Inherits from: <code>MiSnapStatelessViewConfiguration</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager29MiSnapCancelViewConfiguration")
@interface MiSnapCancelViewConfiguration : MiSnapStatelessViewConfiguration
/// Creates and returns <code>MiSnapCancelViewConfiguration</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Checkbox state
typedef SWIFT_ENUM(NSInteger, MiSnapCheckboxState, open) {
/// Unchecked
  MiSnapCheckboxStateUnchecked = 0,
/// Checked
  MiSnapCheckboxStateChecked = 1,
};

@class MiSnapCheckboxViewConfiguration;

/// Checkbox view
SWIFT_CLASS("_TtC18MiSnapAssetManager18MiSnapCheckboxView")
@interface MiSnapCheckboxView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns <code>MiSnapHintView</code> with a given configuration
- (nonnull instancetype)initWith:(MiSnapCheckboxViewConfiguration * _Nullable)configuration for:(enum MiSnapCheckboxState)state OBJC_DESIGNATED_INITIALIZER;
/// Changes a checkbox state to checked
- (void)check;
/// Changes a checkbox state to unchecked
- (void)uncheck;
/// Toggles between checked and unchecked states
- (void)toggle;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Checkbox view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager31MiSnapCheckboxViewConfiguration")
@interface MiSnapCheckboxViewConfiguration : NSObject
/// Size
@property (nonatomic) CGSize size;
/// Checkmark color
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Background color when unchecked
@property (nonatomic, strong) UIColor * _Nonnull backgroundColorUnchecked;
/// Background color when checked
@property (nonatomic, strong) UIColor * _Nonnull backgroundColorChecked;
/// Border color when unchecked
/// note:
/// When checked border color is the same as <code>backgroundColorChecked</code>
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// Border width
@property (nonatomic) CGFloat borderWidth;
/// Corner radius
/// Default: <code>-1.0</code>
/// note:
/// when <code>-1</code> (default) corner radius will scale with the whole view size increase to have a consistent look
@property (nonatomic) CGFloat cornerRadius;
/// Shadow color
/// Default: <code>.clear</code>
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// Shadow offset
/// Default: <code>.zero</code>
@property (nonatomic) CGSize shadowOffset;
/// Shadow radius
/// Default: <code>0.0</code>
@property (nonatomic) CGFloat shadowRadius;
/// Shadow opacity
/// Default: <code>0.0</code>
@property (nonatomic) float shadowOpacity;
/// Indicates whether a view is hidden
@property (nonatomic) BOOL isHidden;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIFont;

/// MiSnap label configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager24MiSnapLabelConfiguration")
@interface MiSnapLabelConfiguration : NSObject
/// Size
/// Default: <code>.zero</code>
/// note:
/// when <code>width</code> and/or <code>height</code> are in range <code>0.0001...0.9999</code> then its value is used as a multiplier for its parent’s <code>width</code> and/or <code>height</code>. Otherwise, <code>width</code> and <code>height</code> are nominal values in pixels
@property (nonatomic) CGSize size;
/// Font
/// Default: system font of size 18.0 and regular font weight
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Text alignment
/// Default: <code>.center</code>
@property (nonatomic) NSTextAlignment textAlignment;
/// Text color
/// Default: <code>.label</code> for iOS >= 13 and <code>.black</code> for iOS < 13
/// Used in both Light and Dark modes if <code>colorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Text color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable colorDarkMode;
/// Background color
/// Default: <code>.clear</code>
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Number of lines
/// Default: <code>0</code>
@property (nonatomic) NSInteger numberOfLines;
/// Line break mode
/// Default: <code>.byTruncatingTail</code>
@property (nonatomic) NSLineBreakMode lineBreakMode;
/// Corner radius
/// Default: <code>0.0</code>
@property (nonatomic) CGFloat cornerRadius;
/// Indicates whether corners should be rounded
/// Default: <code>false</code>
/// When overridden to <code>true</code> value of <code>cornerRadius</code> is ignored
@property (nonatomic) BOOL roundCorners;
/// Border width
/// Default: <code>0.0</code>
@property (nonatomic) CGFloat borderWidth;
/// Border color
/// Default: <code>.clear</code>
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// Shadow color
/// Default: <code>.clear</code>
@property (nonatomic, strong) UIColor * _Nonnull shadowColor;
/// Shadow offset
/// Default: <code>.zero</code>
@property (nonatomic) CGSize shadowOffset;
/// Shadow radius
/// Default: <code>0.0</code>
@property (nonatomic) CGFloat shadowRadius;
/// Shadow opacity
/// Default: <code>0.0</code>
@property (nonatomic) float shadowOpacity;
/// Indicates whether should be clipped to bounds
/// Default: <code>false</code>
@property (nonatomic) BOOL clipsToBounds;
/// Indicates whether a label should fit to its text size
/// Default: <code>false</code>
@property (nonatomic) BOOL sizeToFit;
/// Width padding that should be added to a width when <code>sizeToFit</code> is overridden to <code>true</code>
/// Range: <code>0.0...1.0</code>
/// Default: <code>0.0</code>
@property (nonatomic) CGFloat widthPadding;
/// Height padding that should be added to a height when <code>sizeToFit</code> is overridden to <code>true</code>
/// Range: <code>0.0...1.0</code>
/// Default: <code>0.0</code>
@property (nonatomic) CGFloat heightPadding;
/// Indicates whether a label is hidden
@property (nonatomic) BOOL isHidden;
/// Creates and returns configuration with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Document label configuration
/// Inherits from: <code>MiSnapLabelConfiguration</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager32MiSnapDocumentLabelConfiguration")
@interface MiSnapDocumentLabelConfiguration : MiSnapLabelConfiguration
/// A location configuration for a Portrait orientation
@property (nonatomic, strong) MiSnapViewLocation * _Nonnull locationPortrait;
/// A location configuration for a Landscape orientation
@property (nonatomic, strong) MiSnapViewLocation * _Nonnull locationLandscape;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MiSnapGuideAlignment : NSInteger;

/// Outline configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager34MiSnapDocumentOutlineConfiguration")
@interface MiSnapDocumentOutlineConfiguration : NSObject
/// A custom image that should be used instead of a drawn view
/// note:
/// for optimal UX an image asset (.png) should have the exact aspect ratio of a document and should be added to the project in landscape orientation (rotations are handled automatically)
@property (nonatomic, strong) UIImage * _Nullable image;
/// Indicates whether an image should be rotated 180 degrees in portrait orientation when guide’s <code>orientationMode</code> is <code>devicePortraitGuidePortrait</code>
@property (nonatomic) BOOL rotatePortraitImage;
/// Alignment
/// note:
/// used only when orientation mode of <code>MiSnapParameters</code> is set to <code>Device Portrait Guide Landscape</code>
@property (nonatomic) enum MiSnapGuideAlignment alignment SWIFT_DEPRECATED_MSG("Deprecated since 5.6.0 and will be removed in the future");
/// Alpha
@property (nonatomic) CGFloat alpha;
/// Main border color
@property (nonatomic, strong) UIColor * _Nonnull mainBorderColor;
/// Secondary border color
@property (nonatomic, strong) UIColor * _Nonnull secondaryBorderColor;
/// Main border width
@property (nonatomic) CGFloat mainBorderWidth;
/// Secondary border color
@property (nonatomic) CGFloat secondaryBorderWidth;
/// Indicates whether a view is hidden
@property (nonatomic) BOOL isHidden;
/// Alpha of document elements (MRZ, MICR etc)
@property (nonatomic) CGFloat featuresAlpha;
/// Horizontal offset
/// note:
/// a positive value moves an element to the left and a negative value moves an element to the right
/// note:
/// when <code>horizontalOffset</code> is in range <code>0.0001...0.9999</code> then its value is used as a multiplier for its parent’s <code>width</code>. Otherwise, <code>horizontalOffset</code> is an absolute value in pixels
@property (nonatomic) CGFloat horizontalOffset;
/// Vertical offset
/// note:
/// a positive value moves an element down and a negative value moves an element up
/// note:
/// when <code>verticalOffset</code> is in range <code>0.0001...0.9999</code> then its value is used as a multiplier for its parent’s <code>height</code>. Otherwise, <code>verticalOffset</code> is an absolute value in pixels
@property (nonatomic) CGFloat verticalOffset;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Countdown style
typedef SWIFT_ENUM(NSInteger, MiSnapFacialCaptureCountdownStyle, open) {
/// Simple
  MiSnapFacialCaptureCountdownStyleSimple = 0,
/// Pulsate
  MiSnapFacialCaptureCountdownStylePulsate = 1,
/// Infinity
  MiSnapFacialCaptureCountdownStyleInfinity = 2,
/// Burn up
  MiSnapFacialCaptureCountdownStyleBurndUp = 3,
};

@class MiSnapFacialCaptureCountdownViewConfiguration;

/// FacialCapture countdown view
SWIFT_CLASS("_TtC18MiSnapAssetManager32MiSnapFacialCaptureCountdownView")
@interface MiSnapFacialCaptureCountdownView : UILabel
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns <code>MiSnapFacialCaptureCountdownView</code> with given parameters
- (nonnull instancetype)initWith:(MiSnapFacialCaptureCountdownViewConfiguration * _Nullable)configuration countdownTime:(double)countdownTime frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Updates with a given <code>Int</code> value
- (void)updateWith:(NSInteger)value;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// FacialCapture countdown view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager45MiSnapFacialCaptureCountdownViewConfiguration")
@interface MiSnapFacialCaptureCountdownViewConfiguration : NSObject
/// Style
/// <ul>
///   <li>
///     See: <code>MiSnapFacialCaptureCountdownStyle</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapFacialCaptureCountdownStyle style;
/// Size
@property (nonatomic) CGSize size;
/// Text alpha
@property (nonatomic) CGFloat textAlpha;
/// Text  color
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Font size
@property (nonatomic) CGFloat fontSize;
/// Burn up alpha
/// note:
/// Used only when <code>style</code> is <code>MiSnapFacialCaptureCountdownStyle.burndUp</code>
@property (nonatomic) CGFloat burnupAlpha;
/// Burn up color
/// note:
/// Used only when <code>style</code> is <code>MiSnapFacialCaptureCountdownStyle.burndUp</code>
@property (nonatomic, strong) UIColor * _Nonnull burnupColor;
/// Burn up line width
/// note:
/// Used only when <code>style</code> is <code>MiSnapFacialCaptureCountdownStyle.burndUp</code>
@property (nonatomic) CGFloat burnupLineWidth;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MiSnapFacialCaptureVignetteConfiguration;
@class MiSnapFacialCaptureOutlineConfiguration;

/// Facial Capture guide configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager37MiSnapFacialCaptureGuideConfiguration")
@interface MiSnapFacialCaptureGuideConfiguration : NSObject
/// Vignette configuration
@property (nonatomic, strong) MiSnapFacialCaptureVignetteConfiguration * _Nonnull vignette;
/// Outline configuration
@property (nonatomic, strong) MiSnapFacialCaptureOutlineConfiguration * _Nonnull outline;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MiSnapFacialCaptureOutlineState : NSInteger;

/// FacialCapture guide view
SWIFT_CLASS("_TtC18MiSnapAssetManager28MiSnapFacialCaptureGuideView")
@interface MiSnapFacialCaptureGuideView : UIView
/// Outline rectangle
@property (nonatomic, readonly) CGRect outlineRect;
/// State
/// <ul>
///   <li>
///     See: <code>MiSnapFacialCaptureOutlineState</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapFacialCaptureOutlineState state;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns <code>MiSnapFacialCaptureGuideView</code> with given parameters
- (nonnull instancetype)initWith:(MiSnapFacialCaptureGuideConfiguration * _Nullable)configuration fill:(CGFloat)fill orientation:(UIInterfaceOrientation)orientation frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Adjusts look and feel for low light
- (void)adjustForLowLight;
- (void)removeLowLightAdjustment;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// FacialCapture outline color style
typedef SWIFT_ENUM(NSInteger, MiSnapFacialCaptureOutlineColorStyle, open) {
/// Dynamic
/// Changes based on a <code>MiSnapFacialCaptureOutlineState</code>
  MiSnapFacialCaptureOutlineColorStyleDynamic = 0,
/// Fixed
/// Fixed outline color
  MiSnapFacialCaptureOutlineColorStyleFixed = 1,
};


/// FacialCapture outline configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager39MiSnapFacialCaptureOutlineConfiguration")
@interface MiSnapFacialCaptureOutlineConfiguration : NSObject
/// Color style
/// <ul>
///   <li>
///     See: <code>MiSnapFacialCaptureOutlineColorStyle</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapFacialCaptureOutlineColorStyle colorStyle;
/// Width
@property (nonatomic) CGFloat width;
/// Color
/// note:
/// Used only when <code>colorStyle</code> is <code>MiSnapFacialCaptureOutlineColorStyle.fixed</code>
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Color for <code>MiSnapFacialCaptureOutlineState.good</code>
/// note:
/// Used only when <code>colorStyle</code> is <code>MiSnapFacialCaptureOutlineColorStyle.dynamic</code>
@property (nonatomic, strong) UIColor * _Nonnull colorGood;
/// Color for <code>MiSnapFacialCaptureOutlineState.bad</code>
/// note:
/// Used only when <code>colorStyle</code> is <code>MiSnapFacialCaptureOutlineColorStyle.dynamic</code>
@property (nonatomic, strong) UIColor * _Nonnull colorBad;
/// Alpha
@property (nonatomic) float alpha;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// FacialCapture outline state
typedef SWIFT_ENUM(NSInteger, MiSnapFacialCaptureOutlineState, open) {
/// Bad
/// One of more IQA checks failed
  MiSnapFacialCaptureOutlineStateBad = 0,
/// Good
/// Frame passed all IQA checks
  MiSnapFacialCaptureOutlineStateGood = 1,
};

enum MiSnapFacialCaptureVignetteStyle : NSInteger;

/// Facial Capture vignette configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager40MiSnapFacialCaptureVignetteConfiguration")
@interface MiSnapFacialCaptureVignetteConfiguration : NSObject <NSSecureCoding>
/// Style
/// <ul>
///   <li>
///     See: <code>MiSnapFacialCaptureVignetteStyle</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapFacialCaptureVignetteStyle style;
/// Blur style
/// note:
/// Used only when <code>style</code> is <code>MiSnapFacialCaptureVignetteStyle.blur</code>
@property (nonatomic) UIBlurEffectStyle blurStyle;
/// Color
/// note:
/// Used only when <code>style</code> is <code>MiSnapFacialCaptureVignetteStyle.semitransparent</code>
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Alpha
@property (nonatomic) CGFloat alpha;
/// Default initialization
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Indicates whether a secure coding is supported
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsSecureCoding;)
+ (BOOL)supportsSecureCoding SWIFT_WARN_UNUSED_RESULT;
/// Initialization with coder
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Encodes with coder
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, strong) MiSnapFacialCaptureVignetteConfiguration * _Nonnull deepCopy;
@end

/// Facial Capture vignette style
typedef SWIFT_ENUM(NSInteger, MiSnapFacialCaptureVignetteStyle, open) {
/// Vignette style is not set
  MiSnapFacialCaptureVignetteStyleNone = 0,
/// Blur
  MiSnapFacialCaptureVignetteStyleBlur = 1,
/// Semitransparent
  MiSnapFacialCaptureVignetteStyleSemitransparent = 2,
};

@class MiSnapGlareViewConfiguration;

/// Glare view
SWIFT_CLASS("_TtC18MiSnapAssetManager15MiSnapGlareView")
@interface MiSnapGlareView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns <code>MiSnapGlareView</code> with a given configuration
- (nonnull instancetype)initWith:(MiSnapGlareViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
/// Animates glare view
- (void)animateWith:(CGRect)glareBoundingBox transition:(NSTimeInterval)transition display:(NSTimeInterval)display;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Glare view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager28MiSnapGlareViewConfiguration")
@interface MiSnapGlareViewConfiguration : NSObject
/// Background color
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Border color
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// Border width
@property (nonatomic) CGFloat borderWidth;
/// Corner radius
@property (nonatomic) CGFloat cornerRadius;
/// Min size
/// If a glare bounding box has width and/or heigh less than <code>minSize</code> pixels then increase them to at least <code>minSize</code> to improve user experience
@property (nonatomic) CGFloat minSize;
/// Indicates whether a view is hidden
@property (nonatomic) BOOL isHidden;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Guide alignment
typedef SWIFT_ENUM(NSInteger, MiSnapGuideAlignment, open) {
/// Center
  MiSnapGuideAlignmentCenter = 0,
/// Top
  MiSnapGuideAlignmentTop = 1,
/// Bottom
  MiSnapGuideAlignmentBottom = 2,
};

/// Guide document type
typedef SWIFT_ENUM(NSInteger, MiSnapGuideDocumentType, open) {
/// Guide document type is not set
  MiSnapGuideDocumentTypeNone = 0,
/// Any ID
  MiSnapGuideDocumentTypeAnyId = 1,
/// Passport
  MiSnapGuideDocumentTypePassport = 2,
/// ID Front
  MiSnapGuideDocumentTypeIdFront = 3,
/// ID Back
  MiSnapGuideDocumentTypeIdBack = 4,
/// Check Front
  MiSnapGuideDocumentTypeCheckFront = 5,
/// Check Back
  MiSnapGuideDocumentTypeCheckBack = 6,
/// Generic
  MiSnapGuideDocumentTypeGeneric = 7,
};

/// Guide orientation mode
typedef SWIFT_ENUM(NSInteger, MiSnapGuideOrientationMode, open) {
/// Guide orientation mode is unknown
  MiSnapGuideOrientationModeUnknown = 0,
/// Orientation mode where the app supports Landscape only orientation for a device with the Guide image in Landscape orientation
  MiSnapGuideOrientationModeDeviceLandscapeGuideLandscape = 1,
/// Orientation mode where the app supports all orientations with the Guide image in Portrait orientation when a device is in Portrait orientation
  MiSnapGuideOrientationModeDevicePortraitGuidePortrait = 2,
/// Orientation mode where the app supports all orientations with the Guide image in Landscape orientation when a device is in Portrait orientation
  MiSnapGuideOrientationModeDevicePortraitGuideLandscape = 3,
};

@class MiSnapGuideViewConfiguration;

/// Guide view
SWIFT_CLASS("_TtC18MiSnapAssetManager15MiSnapGuideView")
@interface MiSnapGuideView : UIView
/// Outline rectangle
@property (nonatomic, readonly) CGRect outlineRect;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns <code>MiSnapGuideView</code> with given parameters
- (nonnull instancetype)initFor:(enum MiSnapGuideDocumentType)documentType configuration:(MiSnapGuideViewConfiguration * _Nullable)configuration orientationMode:(enum MiSnapGuideOrientationMode)orientationMode portraitFill:(CGFloat)portraitFill landscapeFill:(CGFloat)landscapeFill orientation:(UIInterfaceOrientation)orientation frame:(CGRect)frame SWIFT_DEPRECATED_MSG("Call init(for:,configuration:,orientationMode:,orientation:,portraitFill:,landscapeFill:,previewFrame:,frame:) instead");
- (nonnull instancetype)initFor:(enum MiSnapGuideDocumentType)documentType configuration:(MiSnapGuideViewConfiguration * _Nullable)configuration orientationMode:(enum MiSnapGuideOrientationMode)orientationMode orientation:(UIInterfaceOrientation)orientation portraitFill:(CGFloat)portraitFill landscapeFill:(CGFloat)landscapeFill previewFrame:(CGRect)previewFrame frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Updates orientation of a guide view
- (void)update:(UIInterfaceOrientation)orientation;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@class MiSnapVignetteConfiguration;

/// Guide view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager28MiSnapGuideViewConfiguration")
@interface MiSnapGuideViewConfiguration : NSObject
/// Vignette configuration
@property (nonatomic, strong) MiSnapVignetteConfiguration * _Nonnull vignette;
/// Outline configuration
@property (nonatomic, strong) MiSnapDocumentOutlineConfiguration * _Nonnull outline;
/// Indicates whether a guide should be hidden on success
@property (nonatomic) BOOL hideOnSuccess;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MiSnapHelpViewConfiguration;

/// Help view
SWIFT_CLASS("_TtC18MiSnapAssetManager14MiSnapHelpView")
@interface MiSnapHelpView : MiSnapStatelessView
/// Creates and returns <code>MiSnapHelpView</code> with an optional configuration
- (nonnull instancetype)initWith:(MiSnapHelpViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
@end


/// Help view configuration
/// Inherits from: <code>MiSnapStatelessViewConfiguration</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager27MiSnapHelpViewConfiguration")
@interface MiSnapHelpViewConfiguration : MiSnapStatelessViewConfiguration
/// Creates and returns <code>MiSnapHelpViewConfiguration</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// Hint style
typedef SWIFT_ENUM(NSInteger, MiSnapHintStyle, open) {
/// Semitransparent
  MiSnapHintStyleSemitransparent = 0,
/// Blur
  MiSnapHintStyleBlur = 1,
};

@class MiSnapHintViewConfiguration;

/// Hint view
SWIFT_CLASS("_TtC18MiSnapAssetManager14MiSnapHintView")
@interface MiSnapHintView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns <code>MiSnapHintView</code> with a given configuration
- (nonnull instancetype)initWith:(MiSnapHintViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
/// Animates hint view
- (void)animateWith:(NSString * _Nonnull)hintMessage transition:(NSTimeInterval)transition display:(NSTimeInterval)display;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Hint view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager27MiSnapHintViewConfiguration")
@interface MiSnapHintViewConfiguration : NSObject
/// Style
/// <ul>
///   <li>
///     See: <code>MiSnapHintStyle</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapHintStyle style;
/// Blur style
/// note:
/// Used only when <code>style</code> is overridden to <code>MiSnapHintStyle.blur</code>
@property (nonatomic) UIBlurEffectStyle blurStyle;
/// Background color
/// note:
/// Used only when <code>style</code> is overridden to <code>MiSnapHintStyle.semitransparent</code>
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Border color
/// note:
/// Used only when <code>style</code> is overridden to <code>MiSnapHintStyle.semitransparent</code>
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// Border width
/// note:
/// Used only when <code>style</code> is overridden to <code>MiSnapHintStyle.semitransparent</code>
@property (nonatomic) CGFloat borderWidth;
/// Size
@property (nonatomic) CGSize size;
/// Corner radius
@property (nonatomic) CGFloat cornerRadius;
/// Text color
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// Font
@property (nonatomic, strong) UIFont * _Nonnull font;
/// Indicates whether a view is hidden
@property (nonatomic) BOOL isHidden;
/// A location configuration for a Portrait orientation
@property (nonatomic, strong) MiSnapViewLocation * _Nonnull locationPortrait;
/// A location configuration for a Landscape orientation
@property (nonatomic, strong) MiSnapViewLocation * _Nonnull locationLandscape;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// MiSnap label
SWIFT_CLASS("_TtC18MiSnapAssetManager11MiSnapLabel")
@interface MiSnapLabel : UILabel
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns a label with a given text configuration
- (nonnull instancetype)initWithText:(NSString * _Nonnull)withText configuration:(MiSnapLabelConfiguration * _Nonnull)configuration in:(CGRect)parentFrame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface MiSnapLabel (SWIFT_EXTENSION(MiSnapAssetManager))
/// Called when the environment’s traits change.
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end


@class MiSnapRecordingIndicatorViewConfiguration;

/// Recording indicator view
SWIFT_CLASS("_TtC18MiSnapAssetManager28MiSnapRecordingIndicatorView")
@interface MiSnapRecordingIndicatorView : UIView
/// Creates and returns <code>MiSnapRecordingIndicatorView</code> with text and an optional configuration
- (nonnull instancetype)initWith:(MiSnapRecordingIndicatorViewConfiguration * _Nullable)configuration text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Recording indicator view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager41MiSnapRecordingIndicatorViewConfiguration")
@interface MiSnapRecordingIndicatorViewConfiguration : NSObject
/// Indicates whether a view is hidden
@property (nonatomic) BOOL isHidden;
/// Size
@property (nonatomic) CGSize size;
/// A location configuration for a Portrait orientation
@property (nonatomic, strong) MiSnapViewLocation * _Nonnull locationPortrait;
/// A location configuration for a Landscape orientation
@property (nonatomic, strong) MiSnapViewLocation * _Nonnull locationLandscape;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MiSnapViewState : NSInteger;

/// MiSnap stateful view
/// Inherits from: <code>MiSnapView</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager18MiSnapStatefulView")
@interface MiSnapStatefulView : MiSnapView
/// State
@property (nonatomic) enum MiSnapViewState state;
- (nonnull instancetype)initWith:(MiSnapViewConfiguration * _Nullable)configuration SWIFT_UNAVAILABLE;
@end


/// Stateful view configuration
/// Inherits from: <code>MiSnapViewConfiguration</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager31MiSnapStatefulViewConfiguration")
@interface MiSnapStatefulViewConfiguration : MiSnapViewConfiguration
/// State
/// <ul>
///   <li>
///     See: <code>MiSnapViewState</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapViewState state;
/// A custom image for <code>MiSnapViewState.enabled</code> state that should be used instead of a drawn view
@property (nonatomic, strong) UIImage * _Nullable imageEnabled;
/// An tint color to apply to image in enabled state if <code>imageEnabled</code> is set
@property (nonatomic, strong) UIColor * _Nullable imageEnabledTintColor;
/// A custom image for <code>MiSnapViewState.disabled</code> state that should be used instead of a drawn view
@property (nonatomic, strong) UIImage * _Nullable imageDisabled;
/// An tint color to apply to image in disabled state if <code>imageDisabled</code> is set
@property (nonatomic, strong) UIColor * _Nullable imageDisabledTintColor;
/// Color for <code>MiSnapViewState.enabled</code>
@property (nonatomic, strong) UIColor * _Nonnull colorEnabled;
/// Color for <code>MiSnapViewState.disabled</code>
@property (nonatomic, strong) UIColor * _Nonnull colorDisabled;
/// Cutout  fill color for <code>MiSnapViewState.enabled</code>
@property (nonatomic, strong) UIColor * _Nullable cutoutFillColorEnabled;
/// Cutout  fill color for <code>MiSnapViewState.disabled</code>
@property (nonatomic, strong) UIColor * _Nullable cutoutFillColorDisabled;
/// Creates and returns configuration with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns configuration for a given <code>MiSnapViewState</code>
- (nonnull instancetype)initFor:(enum MiSnapViewState)state OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



@class MiSnapSuccessCheckmarkViewConfiguration;

/// Success checkmark view
SWIFT_CLASS("_TtC18MiSnapAssetManager26MiSnapSuccessCheckmarkView")
@interface MiSnapSuccessCheckmarkView : MiSnapStatelessView
/// Creates and returns <code>MiSnapSuccessCheckmarkView</code> with an optional configuration
- (nonnull instancetype)initWith:(MiSnapSuccessCheckmarkViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
@end


/// Success checkmark view configuration
/// Inherits from: <code>MiSnapStatelessViewConfiguration</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager39MiSnapSuccessCheckmarkViewConfiguration")
@interface MiSnapSuccessCheckmarkViewConfiguration : MiSnapStatelessViewConfiguration
/// Creates and returns <code>MiSnapSuccessCheckmarkViewConfiguration</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Success configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager26MiSnapSuccessConfiguration")
@interface MiSnapSuccessConfiguration : NSObject
/// Checkmark configuration
@property (nonatomic, strong) MiSnapSuccessCheckmarkViewConfiguration * _Nonnull checkmark;
/// Message configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull message;
/// Background color
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Border color
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
/// Border width
@property (nonatomic) CGFloat borderWidth;
/// Corner radius
@property (nonatomic) CGFloat cornerRadius;
/// Indicates whether a view is hidden
@property (nonatomic) BOOL isHidden;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MiSnapTorchViewConfiguration;

/// Torch view
SWIFT_CLASS("_TtC18MiSnapAssetManager15MiSnapTorchView")
@interface MiSnapTorchView : MiSnapStatefulView
/// Creates and returns <code>MiSnapTorchView</code> with an optional configuration
- (nonnull instancetype)initWith:(MiSnapTorchViewConfiguration * _Nullable)configuration OBJC_DESIGNATED_INITIALIZER;
@end


/// Help view configuration
/// Inherits from: <code>MiSnapStatefulViewConfiguration</code>
SWIFT_CLASS("_TtC18MiSnapAssetManager28MiSnapTorchViewConfiguration")
@interface MiSnapTorchViewConfiguration : MiSnapStatefulViewConfiguration
/// Creates and returns <code>MiSnapTorchViewConfiguration</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns <code>MiSnapTorchViewConfiguration</code> with default values for a given state
- (nonnull instancetype)initFor:(enum MiSnapViewState)state OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// Horizontal alignment
typedef SWIFT_ENUM(NSInteger, MiSnapViewHorizontalAlignment, open) {
/// Left
  MiSnapViewHorizontalAlignmentLeft = 0,
/// Center
  MiSnapViewHorizontalAlignmentCenter = 1,
/// Right
  MiSnapViewHorizontalAlignmentRight = 2,
};

enum MiSnapViewVerticalAlignment : NSInteger;
enum MiSnapViewParent : NSInteger;

/// View location
SWIFT_CLASS("_TtC18MiSnapAssetManager18MiSnapViewLocation")
@interface MiSnapViewLocation : NSObject
/// Horizontal alignment
@property (nonatomic) enum MiSnapViewHorizontalAlignment horizontalAlignment;
/// Horizontal offset
/// note:
/// a positive value moves an element to the left and a negative value moves an element to the right
/// note:
/// when <code>horizontalOffset</code> is in range <code>0.0001...0.9999</code> then its value is used as a multiplier for its parent’s <code>width</code>. Otherwise, <code>horizontalOffset</code> is an absolute value in pixels
@property (nonatomic) CGFloat horizontalOffset;
/// Vertical alignment
@property (nonatomic) enum MiSnapViewVerticalAlignment verticalAlignment;
/// Vertical offset
/// note:
/// a positive value moves an element down and a negative value moves an element up
/// note:
/// when <code>verticalOffset</code> is in range <code>0.0001...0.9999</code> then its value is used as a multiplier for its parent’s <code>height</code>. Otherwise, <code>verticalOffset</code> is an absolute value in pixels
@property (nonatomic) CGFloat verticalOffset;
/// Parent
@property (nonatomic) enum MiSnapViewParent parent;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Parent
typedef SWIFT_ENUM(NSInteger, MiSnapViewParent, open) {
/// Indicates that the entire parent’s view is used
  MiSnapViewParentEntireView = 0,
/// Indicates that document outline origin x and y are used as 0, 0 cordinates
  MiSnapViewParentDocumentOutline = 1,
};

/// View state
typedef SWIFT_ENUM(NSInteger, MiSnapViewState, open) {
/// Enabled
  MiSnapViewStateEnabled = 0,
/// Disabled
  MiSnapViewStateDisabled = 1,
};

/// Vertical alignment
typedef SWIFT_ENUM(NSInteger, MiSnapViewVerticalAlignment, open) {
/// Top
  MiSnapViewVerticalAlignmentTop = 0,
/// Center
  MiSnapViewVerticalAlignmentCenter = 1,
/// Bottom
  MiSnapViewVerticalAlignmentBottom = 2,
};

enum MiSnapVignetteStyle : NSInteger;

/// Vignette configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager27MiSnapVignetteConfiguration")
@interface MiSnapVignetteConfiguration : NSObject
/// Style
/// <ul>
///   <li>
///     See: <code>MiSnapVignetteStyle</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapVignetteStyle style;
/// Color
/// note:
/// Used only when <code>style</code> is overridden to <code>MiSnapVignetteStyle.semitransparent</code>
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Alpha
/// note:
/// Used only when <code>style</code> is overridden to <code>MiSnapVignetteStyle.blur</code> or <code>MiSnapVignetteStyle.semitransparent</code>
@property (nonatomic) CGFloat alpha;
/// Blur style
/// note:
/// used only when <code>style</code> is overridden to <code>MiSnapVignetteStyle.blur</code>
@property (nonatomic) UIBlurEffectStyle blurStyle;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Vignette style
typedef SWIFT_ENUM(NSInteger, MiSnapVignetteStyle, open) {
/// Vignette style is not set
  MiSnapVignetteStyleNone = 0,
/// Blur
  MiSnapVignetteStyleBlur = 1,
/// Semitransparent
  MiSnapVignetteStyleSemitransparent = 2,
};


/// Status view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager41MiSnapVoiceCaptureStatusViewConfiguration")
@interface MiSnapVoiceCaptureStatusViewConfiguration : NSObject
/// Size
@property (nonatomic) CGFloat diameter;
/// A custom image that should be used instead of a drawn view
@property (nonatomic, strong) UIImage * _Nullable image;
/// Color
@property (nonatomic, strong) UIColor * _Nonnull color;
/// Background color
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Animation color
@property (nonatomic, strong) UIColor * _Nonnull animationColor;
/// Animation time
@property (nonatomic) CGFloat animationTime;
/// Line width
@property (nonatomic) CGFloat lineWidth;
/// Line cap
@property (nonatomic) CAShapeLayerLineCap _Nonnull lineCap;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Failure view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager42MiSnapVoiceCaptureFailureViewConfiguration")
@interface MiSnapVoiceCaptureFailureViewConfiguration : MiSnapVoiceCaptureStatusViewConfiguration
/// Creates and returns <code>MiSnapVoiceCaptureFailureViewConfiguration</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Neutral view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager42MiSnapVoiceCaptureNeutralViewConfiguration")
@interface MiSnapVoiceCaptureNeutralViewConfiguration : MiSnapVoiceCaptureStatusViewConfiguration
/// Creates and returns <code>MiSnapVoiceCaptureNeutralViewConfiguration</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

enum MiSnapVoiceCaptureViewStatus : NSInteger;

/// Status view
SWIFT_CLASS("_TtC18MiSnapAssetManager28MiSnapVoiceCaptureStatusView")
@interface MiSnapVoiceCaptureStatusView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Diameter
@property (nonatomic, readonly) CGFloat diameter;
/// Animation color
@property (nonatomic, readonly, strong) UIColor * _Nonnull animationColor;
/// Animation time
@property (nonatomic, readonly) CGFloat animationTime;
/// Updates for a given status
- (void)updateFor:(enum MiSnapVoiceCaptureViewStatus)status;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



/// Success view configuration
SWIFT_CLASS("_TtC18MiSnapAssetManager42MiSnapVoiceCaptureSuccessViewConfiguration")
@interface MiSnapVoiceCaptureSuccessViewConfiguration : MiSnapVoiceCaptureStatusViewConfiguration
/// Creates and returns <code>MiSnapVoiceCaptureSuccessViewConfiguration</code> with default values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

/// A view status
typedef SWIFT_ENUM(NSInteger, MiSnapVoiceCaptureViewStatus, open) {
/// Neutral
  MiSnapVoiceCaptureViewStatusNeutral = 0,
/// Success
  MiSnapVoiceCaptureViewStatusSuccess = 1,
/// Failure
  MiSnapVoiceCaptureViewStatusFailure = 2,
};



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
