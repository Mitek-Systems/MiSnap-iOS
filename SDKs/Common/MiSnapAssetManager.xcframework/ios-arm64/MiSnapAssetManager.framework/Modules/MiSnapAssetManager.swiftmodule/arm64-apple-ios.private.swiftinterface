// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MiSnapAssetManager
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import MiSnapAssetManager
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc public class MiSnapGlareViewConfiguration : ObjectiveC.NSObject {
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var borderColor: UIKit.UIColor
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc public var minSize: CoreFoundation.CGFloat
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapGlareView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapGlareViewConfiguration? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func animate(with glareBoundingBox: CoreFoundation.CGRect)
  @objc deinit
}
@objc public enum MiSnapAssetStyle : Swift.Int {
  case fill = 0
  case stroke = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MiSnapViewState : Swift.Int {
  case enabled = 0
  case disabled = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapViewConfiguration : ObjectiveC.NSObject {
  @objc public var style: MiSnapAssetStyle
  @objc public var size: CoreFoundation.CGSize
  @objc public var shadowColor: UIKit.UIColor
  @objc public var shadowOffset: CoreFoundation.CGSize
  public var shadowRadius: CoreFoundation.CGFloat?
  @objc public var shadowOpacity: CoreFoundation.CGFloat
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapStatelessViewConfiguration : MiSnapViewConfiguration {
  @objc public var image: UIKit.UIImage?
  @objc public var color: UIKit.UIColor
  @objc public var cutoutFillColor: UIKit.UIColor?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapStatefulViewConfiguration : MiSnapViewConfiguration {
  @objc public var state: MiSnapViewState
  @objc public var imageEnabled: UIKit.UIImage?
  @objc public var imageDisabled: UIKit.UIImage?
  @objc public var colorEnabled: UIKit.UIColor
  @objc public var colorDisabled: UIKit.UIColor
  @objc public var cutoutFillColorEnabled: UIKit.UIColor?
  @objc public var cutoutFillColorDisabled: UIKit.UIColor?
  @objc override dynamic public init()
  @objc public init(for state: MiSnapViewState)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapViewConfiguration? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapStatelessView : MiSnapView {
  @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapStatelessViewConfiguration? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapStatefulView : MiSnapView {
  @objc @_Concurrency.MainActor(unsafe) public var state: MiSnapViewState {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapStatefulViewConfiguration? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapHelpViewConfiguration : MiSnapStatelessViewConfiguration {
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapHelpView : MiSnapStatelessView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapHelpViewConfiguration? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapRecordingIndicatorViewConfiguration : ObjectiveC.NSObject {
  public var textColor: UIKit.UIColor
  public var dotColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
  public var alpha: CoreFoundation.CGFloat
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapRecordingIndicatorView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapRecordingIndicatorViewConfiguration? = nil, text: Swift.String)
  @objc deinit
}
@objc public enum MiSnapFacialCaptureCountdownStyle : Swift.Int {
  case simple = 0
  case pulsate = 1
  case infinity = 2
  case burndUp = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapFacialCaptureCountdownViewConfiguration : ObjectiveC.NSObject {
  @objc public var style: MiSnapFacialCaptureCountdownStyle
  @objc public var size: CoreFoundation.CGSize
  @objc public var textAlpha: CoreFoundation.CGFloat
  @objc public var textColor: UIKit.UIColor
  @objc public var fontSize: CoreFoundation.CGFloat
  @objc public var burnupAlpha: CoreFoundation.CGFloat
  @objc public var burnupColor: UIKit.UIColor
  @objc public var burnupLineWidth: CoreFoundation.CGFloat
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapFacialCaptureCountdownView : UIKit.UILabel {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapFacialCaptureCountdownViewConfiguration? = nil, countdownTime: Swift.Double, frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func update(with value: Swift.Int)
  @objc deinit
}
extension CoreFoundation.CGSize {
  public func scaled(by scale: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
@_inheritsConvenienceInitializers @objc public class MiSnapFacialCaptureGuideConfiguration : ObjectiveC.NSObject {
  @objc public var vignette: MiSnapFacialCaptureVignetteConfiguration
  @objc public var outline: MiSnapFacialCaptureOutlineConfiguration
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MiSnapFacialCaptureVignetteStyle : Swift.Int {
  case none = 0
  case blur = 1
  case semitransparent = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapFacialCaptureVignetteConfiguration : ObjectiveC.NSObject {
  @objc public var style: MiSnapFacialCaptureVignetteStyle
  @objc public var blurStyle: UIKit.UIBlurEffect.Style
  @objc public var color: UIKit.UIColor
  @objc public var alpha: CoreFoundation.CGFloat
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MiSnapFacialCaptureOutlineColorStyle : Swift.Int {
  case dynamic = 0
  case fixed = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MiSnapFacialCaptureOutlineState : Swift.Int {
  case bad = 0
  case good = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapFacialCaptureOutlineConfiguration : ObjectiveC.NSObject {
  @objc public var colorStyle: MiSnapFacialCaptureOutlineColorStyle
  @objc public var width: CoreFoundation.CGFloat
  @objc public var color: UIKit.UIColor
  @objc public var colorGood: UIKit.UIColor
  @objc public var colorBad: UIKit.UIColor
  @objc public var alpha: Swift.CFloat
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapFacialCaptureGuideView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var outlineRect: CoreFoundation.CGRect {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var state: MiSnapFacialCaptureOutlineState {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapFacialCaptureGuideConfiguration? = nil, fill: CoreFoundation.CGFloat, orientation: UIKit.UIInterfaceOrientation = .portrait, frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapSuccessConfiguration : ObjectiveC.NSObject {
  @objc public var checkmark: MiSnapSuccessCheckmarkViewConfiguration
  @objc public var message: MiSnapLabelConfiguration
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapSuccessCheckmarkViewConfiguration : MiSnapStatelessViewConfiguration {
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapSuccessCheckmarkView : MiSnapStatelessView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapSuccessCheckmarkViewConfiguration? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapLabelConfiguration : ObjectiveC.NSObject {
  @objc public var size: CoreFoundation.CGSize
  @objc public var font: UIKit.UIFont
  @objc public var textAlignment: UIKit.NSTextAlignment
  @objc public var color: UIKit.UIColor
  @objc public var colorDarkMode: UIKit.UIColor?
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var backgroundColorDarkMode: UIKit.UIColor?
  @objc public var numberOfLines: Swift.Int
  @objc public var lineBreakMode: UIKit.NSLineBreakMode
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc public var roundCorners: Swift.Bool
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc public var borderColor: UIKit.UIColor
  @objc public var shadowColor: UIKit.UIColor
  @objc public var shadowOffset: CoreFoundation.CGSize
  @objc public var shadowRadius: CoreFoundation.CGFloat
  @objc public var shadowOpacity: Swift.Float
  @objc public var clipsToBounds: Swift.Bool
  @objc public var sizeToFit: Swift.Bool
  @objc public var widthPadding: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var heightPadding: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapLabel : UIKit.UILabel {
  @objc @_Concurrency.MainActor(unsafe) public init(withText: Swift.String, configuration: MiSnapLabelConfiguration, in parentFrame: CoreFoundation.CGRect)
  @objc deinit
}
extension MiSnapLabel {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@_inheritsConvenienceInitializers @objc public class MiSnapCameraShutterViewConfiguration : MiSnapStatelessViewConfiguration {
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapCameraShutterView : MiSnapStatelessView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapCameraShutterViewConfiguration? = nil)
  @objc deinit
}
@objc public enum MiSnapVoiceCaptureViewStatus : Swift.Int {
  case neutral
  case success
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapVoiceCaptureStatusViewConfiguration : ObjectiveC.NSObject {
  @objc public var diameter: CoreFoundation.CGFloat
  @objc public var image: UIKit.UIImage?
  @objc public var color: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var animationColor: UIKit.UIColor
  @objc public var animationTime: CoreFoundation.CGFloat
  @objc public var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc public var lineCap: QuartzCore.CAShapeLayerLineCap
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapVoiceCaptureNeutralViewConfiguration : MiSnapVoiceCaptureStatusViewConfiguration {
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapVoiceCaptureSuccessViewConfiguration : MiSnapVoiceCaptureStatusViewConfiguration {
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapVoiceCaptureFailureViewConfiguration : MiSnapVoiceCaptureStatusViewConfiguration {
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapVoiceCaptureStatusView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var diameter: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var animationColor: UIKit.UIColor {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var animationTime: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public init(with status: MiSnapVoiceCaptureViewStatus, neutralConfiguration: MiSnapVoiceCaptureNeutralViewConfiguration? = nil, successConfiguration: MiSnapVoiceCaptureSuccessViewConfiguration? = nil, failureConfiguration: MiSnapVoiceCaptureFailureViewConfiguration? = nil, for step: Swift.Int? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func update(for status: MiSnapVoiceCaptureViewStatus)
  @objc deinit
}
@objc public enum BulletType : Swift.Int {
  case arrow
  case circle
  case square
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapBulletViewConfiguration : ObjectiveC.NSObject {
  @objc public var type: BulletType {
    @objc get
    @objc set
  }
  @objc public var size: CoreFoundation.CGSize
  @objc public var fillColor: UIKit.UIColor
  @objc public var strokeColor: UIKit.UIColor
  @objc public var strokeWidth: CoreFoundation.CGFloat
  @objc public var shadowColor: UIKit.UIColor
  @objc public var shadowOffset: CoreFoundation.CGSize
  @objc public var shadowRadius: CoreFoundation.CGFloat
  @objc public var shadowOpacity: Swift.Float
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapBulletView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapBulletViewConfiguration? = nil)
  @objc deinit
}
extension MiSnapBulletView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@objc public enum MiSnapHintStyle : Swift.Int {
  case semitransparent = 0
  case blur = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapHintViewConfiguration : ObjectiveC.NSObject {
  @objc public var style: MiSnapHintStyle
  @objc public var blurStyle: UIKit.UIBlurEffect.Style
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var borderColor: UIKit.UIColor
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc public var size: CoreFoundation.CGSize
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc public var textColor: UIKit.UIColor
  @objc public var font: UIKit.UIFont
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapHintView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapHintViewConfiguration? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func animate(with hintMessage: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapCancelViewConfiguration : MiSnapStatelessViewConfiguration {
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapCancelView : MiSnapStatelessView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapCancelViewConfiguration? = nil)
  @objc deinit
}
@objc public enum MiSnapGuideDocumentType : Swift.Int {
  case none = 0
  case anyId = 1
  case passport = 2
  case idFront = 3
  case idBack = 4
  case checkFront = 5
  case checkBack = 6
  case generic = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MiSnapGuideOrientationMode : Swift.Int {
  case unknown = 0
  case deviceLandscapeGuideLandscape = 1
  case devicePortraitGuidePortrait = 2
  case devicePortraitGuideLandscape = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapGuideViewConfiguration : ObjectiveC.NSObject {
  @objc public var vignette: MiSnapVignetteConfiguration
  @objc public var outline: MiSnapDocumentOutlineConfiguration
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MiSnapVignetteStyle : Swift.Int {
  case none = 0
  case blur = 1
  case semitransparent = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapVignetteConfiguration : ObjectiveC.NSObject {
  @objc public var style: MiSnapVignetteStyle
  @objc public var color: UIKit.UIColor
  @objc public var alpha: CoreFoundation.CGFloat
  @objc public var blurStyle: UIKit.UIBlurEffect.Style
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MiSnapGuideAlignment : Swift.Int {
  case center = 0
  case top = 1
  case bottom = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapDocumentOutlineConfiguration : ObjectiveC.NSObject {
  @objc public var alignment: MiSnapGuideAlignment
  @objc public var alpha: CoreFoundation.CGFloat
  @objc public var mainBorderColor: UIKit.UIColor
  @objc public var secondaryBorderColor: UIKit.UIColor
  @objc public var mainBorderWidth: CoreFoundation.CGFloat
  @objc public var secondaryBorderWidth: CoreFoundation.CGFloat
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapGuideView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var outlineRect: CoreFoundation.CGRect {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(for documentType: MiSnapGuideDocumentType, configuration: MiSnapGuideViewConfiguration? = nil, orientationMode: MiSnapGuideOrientationMode, portraitFill: CoreFoundation.CGFloat, landscapeFill: CoreFoundation.CGFloat, orientation: UIKit.UIInterfaceOrientation, frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func update(_ orientation: UIKit.UIInterfaceOrientation)
  @objc deinit
}
@objc public enum MiSnapCheckboxState : Swift.Int {
  case unchecked
  case checked
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapCheckboxViewConfiguration : ObjectiveC.NSObject {
  @objc public var size: CoreFoundation.CGSize
  @objc public var color: UIKit.UIColor
  @objc public var backgroundColorUnchecked: UIKit.UIColor
  @objc public var backgroundColorChecked: UIKit.UIColor
  @objc public var borderColor: UIKit.UIColor
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc public var shadowColor: UIKit.UIColor
  @objc public var shadowOffset: CoreFoundation.CGSize
  @objc public var shadowRadius: CoreFoundation.CGFloat
  @objc public var shadowOpacity: Swift.Float
  @objc public var isHidden: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapCheckboxView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapCheckboxViewConfiguration? = nil, for state: MiSnapCheckboxState = .unchecked)
  @objc @_Concurrency.MainActor(unsafe) public func check()
  @objc @_Concurrency.MainActor(unsafe) public func uncheck()
  @objc @_Concurrency.MainActor(unsafe) public func toggle()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapTorchViewConfiguration : MiSnapStatefulViewConfiguration {
  @objc override dynamic public init()
  @objc override public init(for state: MiSnapViewState)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapTorchView : MiSnapStatefulView {
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapTorchViewConfiguration? = nil)
  @objc deinit
}
extension MiSnapAssetStyle : Swift.Equatable {}
extension MiSnapAssetStyle : Swift.Hashable {}
extension MiSnapAssetStyle : Swift.RawRepresentable {}
extension MiSnapViewState : Swift.Equatable {}
extension MiSnapViewState : Swift.Hashable {}
extension MiSnapViewState : Swift.RawRepresentable {}
extension MiSnapFacialCaptureCountdownStyle : Swift.Equatable {}
extension MiSnapFacialCaptureCountdownStyle : Swift.Hashable {}
extension MiSnapFacialCaptureCountdownStyle : Swift.RawRepresentable {}
extension MiSnapFacialCaptureVignetteStyle : Swift.Equatable {}
extension MiSnapFacialCaptureVignetteStyle : Swift.Hashable {}
extension MiSnapFacialCaptureVignetteStyle : Swift.RawRepresentable {}
extension MiSnapFacialCaptureOutlineColorStyle : Swift.Equatable {}
extension MiSnapFacialCaptureOutlineColorStyle : Swift.Hashable {}
extension MiSnapFacialCaptureOutlineColorStyle : Swift.RawRepresentable {}
extension MiSnapFacialCaptureOutlineState : Swift.Equatable {}
extension MiSnapFacialCaptureOutlineState : Swift.Hashable {}
extension MiSnapFacialCaptureOutlineState : Swift.RawRepresentable {}
extension MiSnapVoiceCaptureViewStatus : Swift.Equatable {}
extension MiSnapVoiceCaptureViewStatus : Swift.Hashable {}
extension MiSnapVoiceCaptureViewStatus : Swift.RawRepresentable {}
extension BulletType : Swift.Equatable {}
extension BulletType : Swift.Hashable {}
extension BulletType : Swift.RawRepresentable {}
extension MiSnapHintStyle : Swift.Equatable {}
extension MiSnapHintStyle : Swift.Hashable {}
extension MiSnapHintStyle : Swift.RawRepresentable {}
extension MiSnapGuideDocumentType : Swift.Equatable {}
extension MiSnapGuideDocumentType : Swift.Hashable {}
extension MiSnapGuideDocumentType : Swift.RawRepresentable {}
extension MiSnapGuideOrientationMode : Swift.Equatable {}
extension MiSnapGuideOrientationMode : Swift.Hashable {}
extension MiSnapGuideOrientationMode : Swift.RawRepresentable {}
extension MiSnapVignetteStyle : Swift.Equatable {}
extension MiSnapVignetteStyle : Swift.Hashable {}
extension MiSnapVignetteStyle : Swift.RawRepresentable {}
extension MiSnapGuideAlignment : Swift.Equatable {}
extension MiSnapGuideAlignment : Swift.Hashable {}
extension MiSnapGuideAlignment : Swift.RawRepresentable {}
extension MiSnapCheckboxState : Swift.Equatable {}
extension MiSnapCheckboxState : Swift.Hashable {}
extension MiSnapCheckboxState : Swift.RawRepresentable {}
