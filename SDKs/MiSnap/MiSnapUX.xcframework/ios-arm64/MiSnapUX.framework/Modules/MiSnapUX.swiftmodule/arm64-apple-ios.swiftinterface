// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MiSnapUX
import MiSnap
import MiSnapAssetManager
import MiSnapLicenseManager
import MiSnapScience
@_exported import MiSnapUX
import Swift
import UIKit
import _Concurrency
@objc public enum MiSnapUxTutorialMode : Swift.Int {
  case none = 0
  case instruction = 1
  case help = 2
  case timeout = 3
  case review = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MiSnapTutorialViewControllerDelegate {
  @objc func tutorialContinueButtonAction(for tutorialMode: MiSnapUxTutorialMode)
  @objc optional func tutorialRetryButtonAction()
  @objc func tutorialCancelButtonAction()
}
@_inheritsConvenienceInitializers @objc public class MiSnapTutorialViewControllerConfiguration : ObjectiveC.NSObject {
  @objc public var instruction: MiSnapTutorialViewControllerInstructionConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MiSnapTutorialType : Swift.Int {
  case defaultType = 0
  case passportQr = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MiSnapTutorialViewControllerInstructionConfiguration : ObjectiveC.NSObject {
  @objc public var type: MiSnapTutorialType {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MiSnapReviewMode : Swift.Int, Swift.Codable {
  case manualOnly = 0
  case autoAndManual = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapUxParameters : ObjectiveC.NSObject, Swift.Codable {
  @objc public var timeout: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var showIntroductoryInstructionScreen: Swift.Bool
  @objc public var showTimeoutScreen: Swift.Bool
  @objc public var showHelpScreen: Swift.Bool
  @objc public var showReviewScreen: Swift.Bool
  @objc public var reviewMode: MiSnapReviewMode
  @objc public var seamlessFailover: Swift.Bool
  @objc public var autoDismiss: Swift.Bool
  @objc public var showManualButtonInAuto: Swift.Bool
  @objc public var showCorners: Swift.Bool
  @objc public var hintUpdatePeriod: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var terminationDelay: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var injectImageName: Swift.String?
  @objc public var dictionary: [Swift.String : Swift.String] {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class MiSnapConfiguration : ObjectiveC.NSObject {
  @objc public var parameters: MiSnapParameters {
    get
  }
  @objc public var uxParameters: MiSnapUxParameters {
    get
  }
  @objc public var guide: MiSnapGuideViewConfiguration {
    get
  }
  @objc public var hint: MiSnapHintViewConfiguration {
    get
  }
  @objc public var glare: MiSnapGlareViewConfiguration {
    get
  }
  @objc public var documentLabel: MiSnapLabelConfiguration {
    get
  }
  @objc public var cancel: MiSnapCancelViewConfiguration {
    get
  }
  @objc public var help: MiSnapHelpViewConfiguration {
    get
  }
  @objc public var torch: MiSnapTorchViewConfiguration {
    get
  }
  @objc public var cameraShutter: MiSnapCameraShutterViewConfiguration {
    get
  }
  @objc public var recordingIndicator: MiSnapRecordingIndicatorViewConfiguration {
    get
  }
  @objc public var successCheckmark: MiSnapSuccessCheckmarkViewConfiguration {
    get
  }
  @objc public var tutorial: MiSnapTutorialViewControllerConfiguration {
    get
  }
  @objc override dynamic public init()
  @objc public init(for documentType: MiSnapScienceDocumentType)
  @objc public func withCustomParameters(completion: (MiSnapParameters) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomUxParameters(completion: (MiSnapUxParameters) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomGuide(completion: (MiSnapGuideViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomHint(completion: (MiSnapHintViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomGlare(completion: (MiSnapGlareViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomDocumentLabel(completion: (MiSnapLabelConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomCancel(completion: (MiSnapCancelViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomHelp(completion: (MiSnapHelpViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomTorch(completion: (MiSnapTorchViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomCameraShutter(completion: (MiSnapCameraShutterViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomRecordingIndicator(completion: (MiSnapRecordingIndicatorViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomSuccessCheckmark(completion: (MiSnapSuccessCheckmarkViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomLocalization(completion: (MiSnapLocalizationConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomInstruction(completion: (MiSnapTutorialViewControllerInstructionConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func applying(_ template: MiSnapConfiguration) -> MiSnapConfiguration
  @objc public init(with parameters: MiSnapParameters, uxParameters: MiSnapUxParameters? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MiSnapLocalizationConfiguration : ObjectiveC.NSObject {
  @objc public var bundle: Foundation.Bundle
  @objc public var stringsName: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol MiSnapViewControllerDelegate {
  @objc func miSnapLicenseStatus(_ status: MiSnapLicenseStatus)
  @objc func miSnapSuccess(_ result: MiSnapResult)
  @objc func miSnapCancelled(_ result: MiSnapResult)
  @objc func miSnapException(_ exception: Foundation.NSException)
  @objc optional func miSnapDidStartSession()
  @objc optional func miSnapHelpAction(_ messages: [Swift.String])
  @objc optional func miSnapTimeoutAction(_ messages: [Swift.String])
  @objc optional func miSnapDidFinishRecordingVideo(_ videoData: Foundation.Data?)
  @objc optional func miSnapShouldBeDismissed()
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var configuration: MiSnapConfiguration {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapConfiguration, delegate: MiSnapViewControllerDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension MiSnapViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func set(delegate: MiSnapViewControllerDelegate?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func pauseAnalysis()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func resumeAnalysis()
  @objc @_Concurrency.MainActor(unsafe) public static func miSnapVersion() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public static func miSnapScienceVersion() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public static func checkCameraPermission(handler: @escaping (Swift.Bool) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) public static func checkMicrophonePermission(handler: @escaping (Swift.Bool) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) public static func hasMinDiskSpace(_ minDiskSpace: Swift.Int) -> Swift.Bool
}
extension MiSnapViewController : MiSnapTutorialViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialContinueButtonAction(for tutorialMode: MiSnapUxTutorialMode)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialRetryButtonAction()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialCancelButtonAction()
}
extension MiSnapViewController : MiSnapCameraDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didReceive(_ sampleBuffer: CoreMedia.CMSampleBuffer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didDecodeBarcode(_ decodedBarcodeString: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFinishRecordingVideo(_ videoData: Foundation.Data?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFinishConfiguringSession()
}
extension MiSnapViewController : MiSnapAnalyzerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerLicenseStatus(_ status: MiSnapLicenseStatus)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerSuccess(_ result: MiSnapResult!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerFrameResult(_ result: MiSnapResult!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerCancelled(_ result: MiSnapResult!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerException(_ exception: Foundation.NSException!)
}
extension MiSnapUxTutorialMode : Swift.Equatable {}
extension MiSnapUxTutorialMode : Swift.Hashable {}
extension MiSnapUxTutorialMode : Swift.RawRepresentable {}
extension MiSnapTutorialType : Swift.Equatable {}
extension MiSnapTutorialType : Swift.Hashable {}
extension MiSnapTutorialType : Swift.RawRepresentable {}
extension MiSnapReviewMode : Swift.Equatable {}
extension MiSnapReviewMode : Swift.Hashable {}
extension MiSnapReviewMode : Swift.RawRepresentable {}
