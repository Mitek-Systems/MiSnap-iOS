// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MiSnapUX
// swift-module-flags-ignorable: -enable-bare-slash-regex
import MiSnap
import MiSnapAssetManager
import MiSnapCore
import MiSnapScience
@_exported import MiSnapUX
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum MiSnapUxTutorialMode : Swift.Int {
  case none = 0
  case instruction = 1
  case help = 2
  case timeout = 3
  case review = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MiSnapTutorialViewControllerDelegate {
  @objc func tutorialContinueButtonAction(for tutorialMode: MiSnapUxTutorialMode)
  @objc optional func tutorialRetryButtonAction()
  @objc func tutorialCancelButtonAction()
}
@_inheritsConvenienceInitializers @objc public class MiSnapTutorialConfiguration : ObjectiveC.NSObject {
  @objc public var backgroundColor: UIKit.UIColor?
  @objc public var backgroundColorDarkMode: UIKit.UIColor?
  @objc public var buttons: MiSnapTutorialButtonsConfiguration
  @objc public var instruction: MiSnapTutorialInstructionConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapTutorialButtonsConfiguration : ObjectiveC.NSObject {
  @objc public var barColor: UIKit.UIColor
  @available(*, deprecated, message: "Use `secondary` instead")
  @objc public var cancel: MiSnapLabelConfiguration
  @available(*, deprecated, message: "Use `primary` and `secondary` instead")
  @objc public var retry: MiSnapLabelConfiguration
  @available(*, deprecated, message: "Use `primary` and `secondary` instead")
  @objc public var proceed: MiSnapLabelConfiguration
  @objc public var primary: MiSnapLabelConfiguration
  @objc public var secondary: MiSnapLabelConfiguration
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum MiSnapTutorialType : Swift.Int {
  case defaultType = 0
  case passportQr = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapTutorialInstructionConfiguration : ObjectiveC.NSObject {
  @objc public var anyId: MiSnapTutorialDocumentTypeConfiguration
  @objc public var passport: MiSnapTutorialDocumentTypeConfiguration
  @objc public var idFront: MiSnapTutorialDocumentTypeConfiguration
  @objc public var idBack: MiSnapTutorialDocumentTypeConfiguration
  @objc public var checkFront: MiSnapTutorialDocumentTypeConfiguration
  @objc public var checkBack: MiSnapTutorialDocumentTypeConfiguration
  @objc public var generic: MiSnapTutorialDocumentTypeConfiguration
  @objc public var type: MiSnapTutorialType
  @objc public var bullet: MiSnapBulletViewConfiguration
  @objc public var checkbox: MiSnapCheckboxViewConfiguration
  @objc public var dontShowAgain: MiSnapLabelConfiguration
  @objc public var message: MiSnapLabelConfiguration
  @objc public var messageSecondary: MiSnapLabelConfiguration
  @objc public var colors: MiSnapColors
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MiSnapTutorialInstructionStyle : Swift.Int {
  case text = 0
  case image = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapTutorialDocumentTypeConfiguration : ObjectiveC.NSObject {
  @objc public var style: MiSnapTutorialInstructionStyle
  @available(*, deprecated, message: "Use `introductoryInstructionMode` of `MiSnapUxParameters` to control whether checkbox should be present or not")
  @objc public var dontShowCheckboxPresent: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum MiSnapReviewMode : Swift.Int, Swift.Codable {
  case manualOnly = 0
  case autoAndManual = 1
  case warnings = 2
  case noReview = 3
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MiSnapIntroductoryInstructionMode : Swift.Int, Swift.Codable {
  case alwaysWithOptOut = 0
  case always = 1
  case firstTimeUseOnly = 2
  case noInstruction = 3
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapUxParameters : ObjectiveC.NSObject, Swift.Codable {
  @objc public var timeout: Swift.Double {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Override `useCustomTutorials` to `true` if you want to present a custom introductory instruction screen or override `introductoryInstructionMode` to `.noInstruction` if you do not want to show it")
  @objc public var showIntroductoryInstructionScreen: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Override `useCustomTutorials` to `true` if you want to present a custom timeout screen")
  @objc public var showTimeoutScreen: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Override `useCustomTutorials` to `true` if you want to present a custom help screen")
  @objc public var showHelpScreen: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Override `useCustomTutorials` to `true` if you want to present a custom review screen or override `reviewMode` to `.noReview` if you do not want to show it")
  @objc public var showReviewScreen: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var useCustomTutorials: Swift.Bool
  @objc public var instructionMode: MiSnapIntroductoryInstructionMode
  @objc public var reviewMode: MiSnapReviewMode
  @objc public var seamlessFailover: Swift.Bool
  @objc public var autoDismiss: Swift.Bool
  @objc public var showManualButtonInAuto: Swift.Bool
  @objc public var showCorners: Swift.Bool
  @available(*, deprecated, message: "Use `hint.betweenTime`, `hint.transitionTime`, and `hint.displayTime` for finer control instead")
  @objc public var hintUpdatePeriod: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var hint: MiSnapHintParameters
  @objc public var terminationDelay: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var injectImageName: Swift.String?
  @objc public var showCancelAlert: Swift.Bool
  @objc public var navigationBarHidden: Swift.Bool
  @objc public var dictionary: [Swift.String : Any] {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class MiSnapHintParameters : ObjectiveC.NSObject, Swift.Codable {
  @objc public var betweenTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var transitionTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var displayTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var initialDelayTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var dictionary: [Swift.String : Swift.String] {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class MiSnapConfiguration : ObjectiveC.NSObject {
  @objc public var parameters: MiSnapParameters {
    get
  }
  @objc public var uxParameters: MiSnapUxParameters {
    get
  }
  @objc public var guide: MiSnapGuideViewConfiguration {
    get
  }
  @objc public var hint: MiSnapHintViewConfiguration {
    get
  }
  @objc public var glare: MiSnapGlareViewConfiguration {
    get
  }
  @objc public var documentLabel: MiSnapDocumentLabelConfiguration {
    get
  }
  @objc public var cancel: MiSnapCancelViewConfiguration {
    get
  }
  @objc public var help: MiSnapHelpViewConfiguration {
    get
  }
  @objc public var torch: MiSnapTorchViewConfiguration {
    get
  }
  @objc public var cameraShutter: MiSnapCameraShutterViewConfiguration {
    get
  }
  @objc public var recordingIndicator: MiSnapRecordingIndicatorViewConfiguration {
    get
  }
  @objc public var success: MiSnapSuccessConfiguration {
    get
  }
  @objc public var tutorial: MiSnapTutorialConfiguration {
    get
  }
  @objc override dynamic public init()
  @objc public init(for documentType: MiSnapScienceDocumentType)
  @objc public func withCustomParameters(completion: (MiSnapParameters) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomUxParameters(completion: (MiSnapUxParameters) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomGuide(completion: (MiSnapGuideViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomHint(completion: (MiSnapHintViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomGlare(completion: (MiSnapGlareViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomDocumentLabel(completion: (MiSnapDocumentLabelConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomCancel(completion: (MiSnapCancelViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomHelp(completion: (MiSnapHelpViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomTorch(completion: (MiSnapTorchViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomCameraShutter(completion: (MiSnapCameraShutterViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomRecordingIndicator(completion: (MiSnapRecordingIndicatorViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomSuccess(completion: (MiSnapSuccessConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @available(*, deprecated, message: "Call withCustomSuccess(completion:) instead and and access this customization through `success.checkmark`")
  @objc public func withCustomSuccessCheckmark(completion: (MiSnapSuccessCheckmarkViewConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomLocalization(completion: (MiSnapLocalizationConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomAssetLocation(completion: (MiSnapAssetLocationConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func withCustomTutorial(completion: (MiSnapTutorialConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @available(*, deprecated, message: "Call withCustomTutorial(completion:) instead and access this customization through `tutorial.instruction`")
  @objc public func withCustomInstruction(completion: (MiSnapTutorialInstructionConfiguration) -> Swift.Void) -> MiSnapConfiguration
  @objc public func applying(_ template: MiSnapConfiguration) -> MiSnapConfiguration
  @objc convenience public init(with parameters: MiSnapParameters, uxParameters: MiSnapUxParameters? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MiSnapLocalizationConfiguration : ObjectiveC.NSObject {
  @objc public var bundle: Foundation.Bundle
  @objc public var stringsName: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapAssetLocationConfiguration : ObjectiveC.NSObject {
  @objc public var bundle: Foundation.Bundle
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol MiSnapViewControllerDelegate {
  @objc func miSnapLicenseStatus(_ status: MiSnapCore.MiSnapLicenseStatus)
  @objc func miSnapSuccess(_ result: MiSnapResult)
  @objc func miSnapCancelled(_ result: MiSnapResult)
  @objc func miSnapException(_ exception: Foundation.NSException)
  @objc optional func miSnapDidStartSession()
  @objc optional func miSnapHelpAction(_ messages: [Swift.String])
  @objc optional func miSnapTimeoutAction(_ messages: [Swift.String])
  @objc optional func miSnapCustomTutorial(_ documentType: MiSnapScienceDocumentType, tutorialMode: MiSnapUxTutorialMode, mode: MiSnapMode, statuses: [Foundation.NSNumber]?, image: UIKit.UIImage?)
  @objc optional func miSnapDidFinishRecordingVideo(_ videoData: Foundation.Data?)
  @objc optional func miSnapShouldBeDismissed()
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var configuration: MiSnapConfiguration {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapConfiguration, delegate: any MiSnapViewControllerDelegate)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func shutdown()
  @objc deinit
}
extension MiSnapViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func set(delegate: (any MiSnapViewControllerDelegate)?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func pauseAnalysis()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func resumeAnalysis()
  @objc @_Concurrency.MainActor(unsafe) public static func miSnapVersion() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public static func miSnapScienceVersion() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) public static func checkCameraPermission(handler: @escaping (Swift.Bool) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) public static func checkMicrophonePermission(handler: @escaping (Swift.Bool) -> Swift.Void)
  @objc @_Concurrency.MainActor(unsafe) public static func hasMinDiskSpace(_ minDiskSpace: Swift.Int) -> Swift.Bool
}
extension MiSnapViewController : MiSnapTutorialViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialContinueButtonAction(for tutorialMode: MiSnapUxTutorialMode)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialRetryButtonAction()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialCancelButtonAction()
}
extension MiSnapViewController : MiSnapCameraDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didReceive(_ sampleBuffer: CoreMedia.CMSampleBuffer)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didDecodeBarcode(_ decodedBarcodeString: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFinishRecordingVideo(_ videoData: Foundation.Data?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFinishConfiguringSession()
}
extension MiSnapViewController : MiSnapAnalyzerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerLicenseStatus(_ status: MiSnapCore.MiSnapLicenseStatus)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerSuccess(_ result: MiSnapResult)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerFrameResult(_ result: MiSnapResult)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerCancelled(_ result: MiSnapResult)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapAnalyzerException(_ exception: Foundation.NSException)
}
extension MiSnapUxTutorialMode : Swift.Equatable {}
extension MiSnapUxTutorialMode : Swift.Hashable {}
extension MiSnapUxTutorialMode : Swift.RawRepresentable {}
extension MiSnapTutorialType : Swift.Equatable {}
extension MiSnapTutorialType : Swift.Hashable {}
extension MiSnapTutorialType : Swift.RawRepresentable {}
extension MiSnapTutorialInstructionStyle : Swift.Equatable {}
extension MiSnapTutorialInstructionStyle : Swift.Hashable {}
extension MiSnapTutorialInstructionStyle : Swift.RawRepresentable {}
extension MiSnapReviewMode : Swift.Equatable {}
extension MiSnapReviewMode : Swift.Hashable {}
extension MiSnapReviewMode : Swift.RawRepresentable {}
extension MiSnapIntroductoryInstructionMode : Swift.Equatable {}
extension MiSnapIntroductoryInstructionMode : Swift.Hashable {}
extension MiSnapIntroductoryInstructionMode : Swift.RawRepresentable {}
