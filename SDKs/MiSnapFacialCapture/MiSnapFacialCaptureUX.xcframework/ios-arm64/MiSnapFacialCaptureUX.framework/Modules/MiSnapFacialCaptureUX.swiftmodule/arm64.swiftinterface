// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MiSnapFacialCaptureUX
import MiSnapAssetManager
import MiSnapFacialCapture
@_exported import MiSnapFacialCaptureUX
import Swift
import UIKit
import _Concurrency
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MiSnapFacialCaptureLocalizationConfiguration : ObjectiveC.NSObject {
  @objc public var bundle: Foundation.Bundle
  @objc public var stringsName: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum MiSnapFaceCaptureFlow : Swift.Int {
  case enrollment = 0
  case verification = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MiSnapFacialCaptureReviewMode : Swift.Int {
  case manualOnly = 0
  case autoAndManual = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MiSnapFacialCaptureUXParameters : ObjectiveC.NSObject {
  @objc public var flow: MiSnapFaceCaptureFlow
  @objc public var showIntroductoryInstructionScreen: Swift.Bool
  @objc public var showTimeoutScreen: Swift.Bool
  @objc public var showHelpScreen: Swift.Bool
  @objc public var showReviewScreen: Swift.Bool
  @objc public var reviewMode: MiSnapFacialCaptureReviewMode
  @objc public var showLandmarks: Swift.Bool
  @objc public var seamlessFailover: Swift.Bool
  @objc public var playShutterShound: Swift.Bool
  @objc public var autoDismiss: Swift.Bool
  @objc public var accessibilityEnabled: Swift.Bool
  @objc public var terminationDelay: Swift.Double {
    @objc get
    @objc set
  }
  @objc public var timeout: Swift.Double {
    @objc get
    @objc set
  }
  @objc public init(for flow: MiSnapFaceCaptureFlow)
  @objc public var dictionary: [Swift.String : Swift.String] {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol MiSnapFacialCaptureTutorialViewControllerDelegate {
  @objc func tutorialCancelButtonAction()
  @objc optional func tutorialRetryButtonAction()
  @objc func tutorialContinueButtonAction(for tutorialMode: MiSnapFacialCaptureTutorialMode)
}
@_inheritsConvenienceInitializers @objc public class MiSnapFacialCaptureConfiguration : ObjectiveC.NSObject {
  @objc public var parameters: MiSnapFacialCaptureParameters
  @objc public var uxParameters: MiSnapFacialCaptureUXParameters
  @objc public var guide: MiSnapFacialCaptureGuideConfiguration {
    get
  }
  @objc public var hint: MiSnapLabelConfiguration {
    get
  }
  @objc public var cancel: MiSnapCancelViewConfiguration {
    get
  }
  @objc public var help: MiSnapHelpViewConfiguration {
    get
  }
  @objc public var cameraShutter: MiSnapCameraShutterViewConfiguration {
    get
  }
  @objc public var countdown: MiSnapFacialCaptureCountdownViewConfiguration {
    get
  }
  @objc public var recordingIndicator: MiSnapRecordingIndicatorViewConfiguration {
    get
  }
  @objc public var successCheckmark: MiSnapSuccessCheckmarkViewConfiguration {
    get
  }
  @objc public var tutorial: MiSnapFacialCaptureTutorialConfiguration {
    get
  }
  @objc public func withCustomParameters(completion: (MiSnapFacialCaptureParameters) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomUxParameters(completion: (MiSnapFacialCaptureUXParameters) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomGuide(completion: (MiSnapFacialCaptureGuideConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomHint(completion: (MiSnapLabelConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomCancel(completion: (MiSnapCancelViewConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomHelp(completion: (MiSnapHelpViewConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomCameraShutter(completion: (MiSnapCameraShutterViewConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomCountdown(completion: (MiSnapFacialCaptureCountdownViewConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomRecordingIndicator(completion: (MiSnapRecordingIndicatorViewConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomSuccessCheckmark(completion: (MiSnapSuccessCheckmarkViewConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomTutorial(completion: (MiSnapFacialCaptureTutorialConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc public func withCustomLocalization(completion: (MiSnapFacialCaptureLocalizationConfiguration) -> Swift.Void) -> MiSnapFacialCaptureConfiguration
  @objc override dynamic public init()
  @objc convenience public init(with parameters: MiSnapFacialCaptureParameters? = nil, uxParameters: MiSnapFacialCaptureUXParameters? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum MiSnapFacialCaptureTutorialButtonLayout : Swift.Int {
  case defaultLayout = 0
  case vertical = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapFacialCaptureTutorialButtonsConfiguration : ObjectiveC.NSObject {
  @objc public var layout: MiSnapFacialCaptureTutorialButtonLayout
  @objc public var cancel: MiSnapLabelConfiguration
  @objc public var retry: MiSnapLabelConfiguration
  @objc public var proceed: MiSnapLabelConfiguration
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MiSnapFacialCaptureTutorialConfiguration : ObjectiveC.NSObject {
  @objc public var buttons: MiSnapFacialCaptureTutorialButtonsConfiguration
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol MiSnapFacialCaptureViewControllerDelegate {
  @objc func miSnapFacialCaptureLicenseStatus(_ status: MiSnapLicenseStatus)
  @objc func miSnapFacialCaptureSuccess(_ result: MiSnapFacialCaptureResult)
  @objc func miSnapFacialCaptureCancelled(_ result: MiSnapFacialCaptureResult)
  @objc optional func miSnapFacialCaptureHelpAction()
  @objc optional func miSnapFacialCaptureTimeoutAction()
  @objc optional func miSnapFacialCaptureDidFinishRecordingVideo(_ videoData: Foundation.Data?)
  @objc optional func miSnapFacialCaptureShouldBeDismissed()
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class MiSnapFacialCaptureViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var configuration: MiSnapFacialCaptureConfiguration {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public init(with configuration: MiSnapFacialCaptureConfiguration, delegate: MiSnapFacialCaptureViewControllerDelegate)
  @objc @_Concurrency.MainActor(unsafe) public func update(_ uxParameters: MiSnapFacialCaptureUXParameters? = nil, _ parameters: MiSnapFacialCaptureParameters? = nil)
  @objc @_Concurrency.MainActor(unsafe) public func shutdown()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
extension MiSnapFacialCaptureViewController : MiSnapFacialCaptureAnalyzerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapFacialCaptureAnalyzerLicenseStatus(_ status: MiSnapLicenseStatus)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapFacialCaptureAnalyzerError(_ result: MiSnapFacialCaptureResult!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapFacialCaptureAnalyzerSuccess(_ result: MiSnapFacialCaptureResult!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapFacialCaptureAnalyzerCancelled(_ result: MiSnapFacialCaptureResult!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapFacialCaptureAnalyzerManualOnly()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func miSnapFacialCaptureAnalyzerStartCountdown()
}
extension MiSnapFacialCaptureViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func presentVC(_ vc: UIKit.UIViewController)
}
extension MiSnapFacialCaptureViewController : MiSnapFacialCaptureTutorialViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialCancelButtonAction()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialContinueButtonAction(for tutorialMode: MiSnapFacialCaptureTutorialMode)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tutorialRetryButtonAction()
}
extension MiSnapFacialCaptureViewController : MiSnapFacialCaptureCameraDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFinishConfiguringSession()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didReceive(_ sampleBuffer: CoreMedia.CMSampleBuffer?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didFinishRecordingVideo(_ videoData: Foundation.Data?)
}
extension MiSnapFacialCaptureViewController {
  @_Concurrency.MainActor(unsafe) public static func checkCameraPermission(handler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public static func checkMicrophonePermission(handler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public static func hasMinDiskSpace(_ minDiskSpace: Swift.Int) -> Swift.Bool
}
extension MiSnapFaceCaptureFlow : Swift.Equatable {}
extension MiSnapFaceCaptureFlow : Swift.Hashable {}
extension MiSnapFaceCaptureFlow : Swift.RawRepresentable {}
extension MiSnapFacialCaptureReviewMode : Swift.Equatable {}
extension MiSnapFacialCaptureReviewMode : Swift.Hashable {}
extension MiSnapFacialCaptureReviewMode : Swift.RawRepresentable {}
extension MiSnapFacialCaptureTutorialButtonLayout : Swift.Equatable {}
extension MiSnapFacialCaptureTutorialButtonLayout : Swift.Hashable {}
extension MiSnapFacialCaptureTutorialButtonLayout : Swift.RawRepresentable {}
