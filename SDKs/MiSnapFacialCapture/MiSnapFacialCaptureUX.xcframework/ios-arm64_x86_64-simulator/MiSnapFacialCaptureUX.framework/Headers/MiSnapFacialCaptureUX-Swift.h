#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef MISNAPFACIALCAPTUREUX_SWIFT_H
#define MISNAPFACIALCAPTUREUX_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import MiSnapCore;
@import MiSnapFacialCapture;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MiSnapFacialCaptureUX",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Flow
typedef SWIFT_ENUM(NSInteger, MiSnapFaceCaptureFlow, open) {
/// Enrollment
  MiSnapFaceCaptureFlowEnrollment = 0,
/// Verification
  MiSnapFaceCaptureFlowVerification = 1,
};

@class NSBundle;
@class NSString;

/// Asset location configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX45MiSnapFacialCaptureAssetLocationConfiguration")
@interface MiSnapFacialCaptureAssetLocationConfiguration : NSObject
/// Bundle where image assets are located
@property (nonatomic, strong) NSBundle * _Nonnull bundle;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MiSnapFacialCaptureParameters;
@class MiSnapFacialCaptureUXParameters;
@class MiSnapFacialCaptureGuideConfiguration;
@class MiSnapLabelConfiguration;
@class MiSnapCancelViewConfiguration;
@class MiSnapHelpViewConfiguration;
@class MiSnapCameraShutterViewConfiguration;
@class MiSnapFacialCaptureCountdownViewConfiguration;
@class MiSnapRecordingIndicatorViewConfiguration;
@class MiSnapSuccessConfiguration;
@class MiSnapFacialCaptureTutorialConfiguration;
@class MiSnapSuccessCheckmarkViewConfiguration;
@class MiSnapFacialCaptureLocalizationConfiguration;

/// A session  configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX32MiSnapFacialCaptureConfiguration")
@interface MiSnapFacialCaptureConfiguration : NSObject
/// SDK parameters
@property (nonatomic, strong) MiSnapFacialCaptureParameters * _Nonnull parameters;
/// UX parameters
@property (nonatomic, strong) MiSnapFacialCaptureUXParameters * _Nonnull uxParameters;
/// Guide view configuration
@property (nonatomic, readonly, strong) MiSnapFacialCaptureGuideConfiguration * _Nonnull guide;
/// Hint label configuration
@property (nonatomic, readonly, strong) MiSnapLabelConfiguration * _Nonnull hint;
/// Cancel button configuration
@property (nonatomic, readonly, strong) MiSnapCancelViewConfiguration * _Nonnull cancel;
/// Help button configuration
@property (nonatomic, readonly, strong) MiSnapHelpViewConfiguration * _Nonnull help;
/// Camera shutter button configuration
@property (nonatomic, readonly, strong) MiSnapCameraShutterViewConfiguration * _Nonnull cameraShutter;
/// Countdown view configuration
@property (nonatomic, readonly, strong) MiSnapFacialCaptureCountdownViewConfiguration * _Nonnull countdown;
/// Recording indicator view configuration
@property (nonatomic, readonly, strong) MiSnapRecordingIndicatorViewConfiguration * _Nonnull recordingIndicator;
/// Success configuration
@property (nonatomic, readonly, strong) MiSnapSuccessConfiguration * _Nonnull success;
/// Tutorial screen configuration
@property (nonatomic, readonly, strong) MiSnapFacialCaptureTutorialConfiguration * _Nonnull tutorial;
/// Convenience function for SDK parameters customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomParametersWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureParameters * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for UX parameters customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomUxParametersWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureUXParameters * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Guide view customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomGuideWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureGuideConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Hint label customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomHintWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapLabelConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Cancel button customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomCancelWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapCancelViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Help button customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomHelpWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapHelpViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Camera shutter button customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomCameraShutterWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapCameraShutterViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Countdown view customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomCountdownWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureCountdownViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Recording indicator view customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomRecordingIndicatorWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapRecordingIndicatorViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Success customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomSuccessWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapSuccessConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Success checkmark view customization
/// note:
/// Deprecated in 5.2.0 and will be removed in future versions.Call <code>withCustomSuccess(completion:)</code> instead and and access this customization through <code>success.checkmark</code>
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomSuccessCheckmarkWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapSuccessCheckmarkViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Call withCustomSuccess(completion:) instead and and access this customization through `success.checkmark`");
/// Convenience function for Tutorial screen customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomTutorialWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureTutorialConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Localization customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomLocalizationWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureLocalizationConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Asset location customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomAssetLocationWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureAssetLocationConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns configuration object with default UX configuration.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Convenience function for initializing a configuration with given SDK and UX parameters
- (nonnull instancetype)initWith:(MiSnapFacialCaptureParameters * _Nullable)parameters uxParameters:(MiSnapFacialCaptureUXParameters * _Nullable)uxParameters;
/// Description of <code>MiSnapFacialCaptureConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Localization configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX44MiSnapFacialCaptureLocalizationConfiguration")
@interface MiSnapFacialCaptureLocalizationConfiguration : NSObject
/// Bundle where localizable files are located
@property (nonatomic, strong) NSBundle * _Nonnull bundle;
/// Localizable file name
@property (nonatomic, copy) NSString * _Nonnull stringsName;
/// Description of <code>MiSnapFacialCaptureLocalizationConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Review mode
typedef SWIFT_ENUM(NSInteger, MiSnapFacialCaptureReviewMode, open) {
/// Present review screen when an image is acquired in <code>Manual</code> mode only
  MiSnapFacialCaptureReviewModeManualOnly = 0,
/// Present review screen when an image is acquired in either <code>Auto</code> or <code>Manual</code> mode
  MiSnapFacialCaptureReviewModeAutoAndManual = 1,
};

/// Tutorial buttons layout
typedef SWIFT_ENUM(NSInteger, MiSnapFacialCaptureTutorialButtonLayout, open) {
/// Default layout
  MiSnapFacialCaptureTutorialButtonLayoutDefaultLayout = 0,
/// A layout where buttons are aligned vertically one under another
  MiSnapFacialCaptureTutorialButtonLayoutVertical = 1,
};


/// A tutorial screen buttons configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX47MiSnapFacialCaptureTutorialButtonsConfiguration")
@interface MiSnapFacialCaptureTutorialButtonsConfiguration : NSObject
/// Layout
@property (nonatomic) enum MiSnapFacialCaptureTutorialButtonLayout layout;
/// Configuration for Cancel button for all tutroial screens
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull cancel;
/// Configuration for:
/// <ul>
///   <li>
///     Auto button in Timeout screen
///   </li>
///   <li>
///     Retake button in Review screen
///   </li>
/// </ul>
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull retry;
/// Configuration for:
/// <ul>
///   <li>
///     Continue button in Instruction and Help screen
///   </li>
///   <li>
///     Manual button in Timeout screen
///   </li>
///   <li>
///     Looks good button in Review screen
///   </li>
/// </ul>
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull proceed;
/// Creates and returns tutorial configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class UIColor;

/// A tutorial screen configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX40MiSnapFacialCaptureTutorialConfiguration")
@interface MiSnapFacialCaptureTutorialConfiguration : NSObject
/// Background color
/// Default: <code>.systemBackground</code> for iOS >= 13  and <code>.white</code> for the rest
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Tutorial buttons configuration
@property (nonatomic, strong) MiSnapFacialCaptureTutorialButtonsConfiguration * _Nonnull buttons;
/// Introductory instruction message configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull introductoryInstructionMessage;
/// Introductory instruction header configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull introductoryInstructionHeader;
/// Timeout message configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull timeoutMessage;
/// Review message configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull reviewMessage;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines an interface for delegates of <code>MiSnapFacialCaptureTutorialViewController</code> to receive callbacks
SWIFT_PROTOCOL("_TtP21MiSnapFacialCaptureUX49MiSnapFacialCaptureTutorialViewControllerDelegate_")
@protocol MiSnapFacialCaptureTutorialViewControllerDelegate
/// A cancel button is pressed
- (void)tutorialCancelButtonAction;
@optional
/// A retry button is pressed
- (void)tutorialRetryButtonAction;
@required
/// A continue button for a specified <code>tutoriaMode</code> is pressed
- (void)tutorialContinueButtonActionFor:(MiSnapFacialCaptureTutorialMode)tutorialMode;
@end


/// UX parameters used during the selfie acquisition process
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX31MiSnapFacialCaptureUXParameters")
@interface MiSnapFacialCaptureUXParameters : NSObject
/// Flow
/// <ul>
///   <li>
///     See: <code>MiSnapFaceCaptureFlow</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapFaceCaptureFlow flow;
/// Indicates whether an introductory instruction screen should be presented
@property (nonatomic) BOOL showIntroductoryInstructionScreen;
/// Indicates whether a timeout screen should be presented
@property (nonatomic) BOOL showTimeoutScreen;
/// Indicates whether a help screen should be presented
@property (nonatomic) BOOL showHelpScreen;
/// Indicates whether a review screen should be presented
@property (nonatomic) BOOL showReviewScreen;
/// Review mode
/// <ul>
///   <li>
///     See: <code>MiSnapFacialCaptureReviewMode</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapFacialCaptureReviewMode reviewMode;
/// Indicates whether landmarks show be displayed for debugging purposes
@property (nonatomic) BOOL showLandmarks;
/// Indicates whether a session should seamlessly failover to Manual instead of presenting a Timeour/Failover screen
@property (nonatomic) BOOL seamlessFailover;
/// Indicates whether a shutter sound should be played upon a successful image acquistion
@property (nonatomic) BOOL playShutterShound;
/// Indicates whether MiSnapFacialCaptureViewController should be automatically dismissed or
/// will be dismissed by a presenting view controller
@property (nonatomic) BOOL autoDismiss;
/// Indicates whether accessibility is enabled
@property (nonatomic) BOOL accessibilityEnabled;
/// Time to delay ending of a session after a successful image acquisition (sec)
/// Range: 1.5…10
/// Default: 1.5
@property (nonatomic) NSTimeInterval terminationDelay;
/// Timeout (sec)
/// Range: 0…30
/// Default: 20
@property (nonatomic) NSTimeInterval timeout;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates and returns default UX parameters for a provided flow
- (nonnull instancetype)initFor:(enum MiSnapFaceCaptureFlow)flow OBJC_DESIGNATED_INITIALIZER;
/// UX parameters dictionary representation
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull dictionary;
/// Description of <code>MiSnapFacialCaptureUXParameters</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSCoder;
@protocol MiSnapFacialCaptureViewControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;

/// A view controller that controls an invoked session
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX33MiSnapFacialCaptureViewController")
@interface MiSnapFacialCaptureViewController : UIViewController
/// A configuration a session was initialized with
@property (nonatomic, readonly, strong) MiSnapFacialCaptureConfiguration * _Nonnull configuration;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns view controller with a given configuration and sets a delegate that’ll be receiving callbacks
- (nonnull instancetype)initWith:(MiSnapFacialCaptureConfiguration * _Nonnull)configuration delegate:(id <MiSnapFacialCaptureViewControllerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// Updates UX and/or SDK parameters
- (void)update:(MiSnapFacialCaptureUXParameters * _Nullable)uxParameters :(MiSnapFacialCaptureParameters * _Nullable)parameters;
/// Cleans up all internal objects to prevent a memory leak
- (void)shutdown;
/// Called after the view has been loaded.
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewDidLoad;
/// Called when the view is about to made visible
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewWillAppear:(BOOL)animated;
/// Called when the view has been fully transitioned onto the screen
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewDidAppear:(BOOL)animated;
/// Called when the view is dismissed, covered or otherwise hidden
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewWillDisappear:(BOOL)animated;
/// Called when the view’s size is changed by its parent
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// Indicates whether a status bar should be hidden
/// note:
/// Only exposed due to public status of parent’s property. Do not override it.
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Returns orientations supported by the view controller
/// note:
/// Only exposed due to public status of parent’s property. Do not override it.
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface MiSnapFacialCaptureViewController (SWIFT_EXTENSION(MiSnapFacialCaptureUX)) <MiSnapFacialCaptureTutorialViewControllerDelegate>
/// Called when a tutorial view controller’s cancel button is pressed
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)tutorialCancelButtonAction;
/// Called when a tutorial view controller’s continue button is pressed
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)tutorialContinueButtonActionFor:(MiSnapFacialCaptureTutorialMode)tutorialMode;
/// Called when a tutorial view controller’s retry button is pressed
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)tutorialRetryButtonAction;
@end

@class NSData;

@interface MiSnapFacialCaptureViewController (SWIFT_EXTENSION(MiSnapFacialCaptureUX)) <MiSnapFacialCaptureCameraDelegate>
/// Called when a camera is configured and ready to be started
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)didFinishConfiguringSession;
/// Called when a camera received a sample buffer
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)didReceiveSampleBuffer:(CMSampleBufferRef _Nullable)sampleBuffer;
/// Called when a camera finished recording a video
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)didFinishRecordingVideo:(NSData * _Nullable)videoData;
@end




@interface MiSnapFacialCaptureViewController (SWIFT_EXTENSION(MiSnapFacialCaptureUX))
/// Convenience function to present another view controller as a child view controller
- (void)presentVC:(UIViewController * _Nonnull)vc;
@end

@class MiSnapFacialCaptureResult;

@interface MiSnapFacialCaptureViewController (SWIFT_EXTENSION(MiSnapFacialCaptureUX)) <MiSnapFacialCaptureAnalyzerDelegate>
/// Called when an analyzer detects an invalid license
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerLicenseStatus:(enum MiSnapLicenseStatus)status;
/// Called when an analyzer detects a frame that fails one or more Image Quality Analysis checks
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerError:(MiSnapFacialCaptureResult * _Null_unspecified)result;
/// Called when an analyzer detects a frame that passes all Image Quality Analysis checks
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerSuccess:(MiSnapFacialCaptureResult * _Null_unspecified)result;
/// Called when an analyzer is cancelled
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerCancelled:(MiSnapFacialCaptureResult * _Null_unspecified)result;
/// Called when a device supports manual only mode (iOS < 12.0)
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerManualOnly;
/// Called when an analyzer detected a frame that passes all IQA checks so that a countown can be started
/// when <code>selectOnSmile</code> is set to <code>false</code> in <code>MiSnapFacialCaptureParameters</code>
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerStartCountdown;
@end



/// Defines an interface for delegates of <code>MiSnapFacialCaptureViewController</code> to receive callbacks
SWIFT_PROTOCOL("_TtP21MiSnapFacialCaptureUX41MiSnapFacialCaptureViewControllerDelegate_")
@protocol MiSnapFacialCaptureViewControllerDelegate
/// Delegates receive this callback only when license status is anything but valid
- (void)miSnapFacialCaptureLicenseStatus:(enum MiSnapLicenseStatus)status;
/// Delegates receive this callback in one of the following cases:
/// <ul>
///   <li>
///     a frame passes Image Quality Analysis (IQA) check in <code>MiSnapFacialCaptureModeAuto</code>
///   </li>
///   <li>
///     a user manually triggers image acqusition
///   </li>
/// </ul>
- (void)miSnapFacialCaptureSuccess:(MiSnapFacialCaptureResult * _Nonnull)result;
/// Delegates receive this callback whenever a user cancels a session
- (void)miSnapFacialCaptureCancelled:(MiSnapFacialCaptureResult * _Nonnull)result;
@optional
/// Delegates receive this callback when a user presses help button and <code>showHelpScreen</code> is overridden to <code>false</code> in <code>MiSnapUxParameters</code>
/// note:
/// It’s optional
- (void)miSnapFacialCaptureHelpAction;
/// Delegates receive this callback when a session times out and <code>showTimeoutScreen</code> is overridden to <code>false</code> in <code>MiSnapUxParameters</code>
/// note:
/// It’s optional
- (void)miSnapFacialCaptureTimeoutAction;
/// Delegates receive this callback when a camera finishes recording a video when <code>recordVideo</code> is overridden to <code>true</code> in <code>MiSnapCameraParameters</code>
/// note:
/// It’s optional
- (void)miSnapFacialCaptureDidFinishRecordingVideo:(NSData * _Nullable)videoData;
/// Delegates receive this callback when a session is completed and ready to be dissmised and <code>autoDismiss</code> is overridden to <code>false</code> in <code>MiSnapUxParameters</code>
/// note:
/// It’s optional
- (void)miSnapFacialCaptureShouldBeDismissed;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef MISNAPFACIALCAPTUREUX_SWIFT_H
#define MISNAPFACIALCAPTUREUX_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import MiSnapCore;
@import MiSnapFacialCapture;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MiSnapFacialCaptureUX",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// Flow
typedef SWIFT_ENUM(NSInteger, MiSnapFaceCaptureFlow, open) {
/// Enrollment
  MiSnapFaceCaptureFlowEnrollment = 0,
/// Verification
  MiSnapFaceCaptureFlowVerification = 1,
};

@class NSBundle;
@class NSString;

/// Asset location configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX45MiSnapFacialCaptureAssetLocationConfiguration")
@interface MiSnapFacialCaptureAssetLocationConfiguration : NSObject
/// Bundle where image assets are located
@property (nonatomic, strong) NSBundle * _Nonnull bundle;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MiSnapFacialCaptureParameters;
@class MiSnapFacialCaptureUXParameters;
@class MiSnapFacialCaptureGuideConfiguration;
@class MiSnapLabelConfiguration;
@class MiSnapCancelViewConfiguration;
@class MiSnapHelpViewConfiguration;
@class MiSnapCameraShutterViewConfiguration;
@class MiSnapFacialCaptureCountdownViewConfiguration;
@class MiSnapRecordingIndicatorViewConfiguration;
@class MiSnapSuccessConfiguration;
@class MiSnapFacialCaptureTutorialConfiguration;
@class MiSnapSuccessCheckmarkViewConfiguration;
@class MiSnapFacialCaptureLocalizationConfiguration;

/// A session  configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX32MiSnapFacialCaptureConfiguration")
@interface MiSnapFacialCaptureConfiguration : NSObject
/// SDK parameters
@property (nonatomic, strong) MiSnapFacialCaptureParameters * _Nonnull parameters;
/// UX parameters
@property (nonatomic, strong) MiSnapFacialCaptureUXParameters * _Nonnull uxParameters;
/// Guide view configuration
@property (nonatomic, readonly, strong) MiSnapFacialCaptureGuideConfiguration * _Nonnull guide;
/// Hint label configuration
@property (nonatomic, readonly, strong) MiSnapLabelConfiguration * _Nonnull hint;
/// Cancel button configuration
@property (nonatomic, readonly, strong) MiSnapCancelViewConfiguration * _Nonnull cancel;
/// Help button configuration
@property (nonatomic, readonly, strong) MiSnapHelpViewConfiguration * _Nonnull help;
/// Camera shutter button configuration
@property (nonatomic, readonly, strong) MiSnapCameraShutterViewConfiguration * _Nonnull cameraShutter;
/// Countdown view configuration
@property (nonatomic, readonly, strong) MiSnapFacialCaptureCountdownViewConfiguration * _Nonnull countdown;
/// Recording indicator view configuration
@property (nonatomic, readonly, strong) MiSnapRecordingIndicatorViewConfiguration * _Nonnull recordingIndicator;
/// Success configuration
@property (nonatomic, readonly, strong) MiSnapSuccessConfiguration * _Nonnull success;
/// Tutorial screen configuration
@property (nonatomic, readonly, strong) MiSnapFacialCaptureTutorialConfiguration * _Nonnull tutorial;
/// Convenience function for SDK parameters customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomParametersWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureParameters * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for UX parameters customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomUxParametersWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureUXParameters * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Guide view customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomGuideWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureGuideConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Hint label customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomHintWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapLabelConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Cancel button customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomCancelWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapCancelViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Help button customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomHelpWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapHelpViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Camera shutter button customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomCameraShutterWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapCameraShutterViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Countdown view customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomCountdownWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureCountdownViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Recording indicator view customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomRecordingIndicatorWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapRecordingIndicatorViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Success customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomSuccessWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapSuccessConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Success checkmark view customization
/// note:
/// Deprecated in 5.2.0 and will be removed in future versions.Call <code>withCustomSuccess(completion:)</code> instead and and access this customization through <code>success.checkmark</code>
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomSuccessCheckmarkWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapSuccessCheckmarkViewConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Call withCustomSuccess(completion:) instead and and access this customization through `success.checkmark`");
/// Convenience function for Tutorial screen customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomTutorialWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureTutorialConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Localization customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomLocalizationWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureLocalizationConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Asset location customization
- (MiSnapFacialCaptureConfiguration * _Nonnull)withCustomAssetLocationWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapFacialCaptureAssetLocationConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns configuration object with default UX configuration.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Convenience function for initializing a configuration with given SDK and UX parameters
- (nonnull instancetype)initWith:(MiSnapFacialCaptureParameters * _Nullable)parameters uxParameters:(MiSnapFacialCaptureUXParameters * _Nullable)uxParameters;
/// Description of <code>MiSnapFacialCaptureConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Localization configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX44MiSnapFacialCaptureLocalizationConfiguration")
@interface MiSnapFacialCaptureLocalizationConfiguration : NSObject
/// Bundle where localizable files are located
@property (nonatomic, strong) NSBundle * _Nonnull bundle;
/// Localizable file name
@property (nonatomic, copy) NSString * _Nonnull stringsName;
/// Description of <code>MiSnapFacialCaptureLocalizationConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Review mode
typedef SWIFT_ENUM(NSInteger, MiSnapFacialCaptureReviewMode, open) {
/// Present review screen when an image is acquired in <code>Manual</code> mode only
  MiSnapFacialCaptureReviewModeManualOnly = 0,
/// Present review screen when an image is acquired in either <code>Auto</code> or <code>Manual</code> mode
  MiSnapFacialCaptureReviewModeAutoAndManual = 1,
};

/// Tutorial buttons layout
typedef SWIFT_ENUM(NSInteger, MiSnapFacialCaptureTutorialButtonLayout, open) {
/// Default layout
  MiSnapFacialCaptureTutorialButtonLayoutDefaultLayout = 0,
/// A layout where buttons are aligned vertically one under another
  MiSnapFacialCaptureTutorialButtonLayoutVertical = 1,
};


/// A tutorial screen buttons configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX47MiSnapFacialCaptureTutorialButtonsConfiguration")
@interface MiSnapFacialCaptureTutorialButtonsConfiguration : NSObject
/// Layout
@property (nonatomic) enum MiSnapFacialCaptureTutorialButtonLayout layout;
/// Configuration for Cancel button for all tutroial screens
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull cancel;
/// Configuration for:
/// <ul>
///   <li>
///     Auto button in Timeout screen
///   </li>
///   <li>
///     Retake button in Review screen
///   </li>
/// </ul>
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull retry;
/// Configuration for:
/// <ul>
///   <li>
///     Continue button in Instruction and Help screen
///   </li>
///   <li>
///     Manual button in Timeout screen
///   </li>
///   <li>
///     Looks good button in Review screen
///   </li>
/// </ul>
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull proceed;
/// Creates and returns tutorial configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class UIColor;

/// A tutorial screen configuration
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX40MiSnapFacialCaptureTutorialConfiguration")
@interface MiSnapFacialCaptureTutorialConfiguration : NSObject
/// Background color
/// Default: <code>.systemBackground</code> for iOS >= 13  and <code>.white</code> for the rest
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Tutorial buttons configuration
@property (nonatomic, strong) MiSnapFacialCaptureTutorialButtonsConfiguration * _Nonnull buttons;
/// Introductory instruction message configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull introductoryInstructionMessage;
/// Introductory instruction header configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull introductoryInstructionHeader;
/// Timeout message configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull timeoutMessage;
/// Review message configuration
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull reviewMessage;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines an interface for delegates of <code>MiSnapFacialCaptureTutorialViewController</code> to receive callbacks
SWIFT_PROTOCOL("_TtP21MiSnapFacialCaptureUX49MiSnapFacialCaptureTutorialViewControllerDelegate_")
@protocol MiSnapFacialCaptureTutorialViewControllerDelegate
/// A cancel button is pressed
- (void)tutorialCancelButtonAction;
@optional
/// A retry button is pressed
- (void)tutorialRetryButtonAction;
@required
/// A continue button for a specified <code>tutoriaMode</code> is pressed
- (void)tutorialContinueButtonActionFor:(MiSnapFacialCaptureTutorialMode)tutorialMode;
@end


/// UX parameters used during the selfie acquisition process
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX31MiSnapFacialCaptureUXParameters")
@interface MiSnapFacialCaptureUXParameters : NSObject
/// Flow
/// <ul>
///   <li>
///     See: <code>MiSnapFaceCaptureFlow</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapFaceCaptureFlow flow;
/// Indicates whether an introductory instruction screen should be presented
@property (nonatomic) BOOL showIntroductoryInstructionScreen;
/// Indicates whether a timeout screen should be presented
@property (nonatomic) BOOL showTimeoutScreen;
/// Indicates whether a help screen should be presented
@property (nonatomic) BOOL showHelpScreen;
/// Indicates whether a review screen should be presented
@property (nonatomic) BOOL showReviewScreen;
/// Review mode
/// <ul>
///   <li>
///     See: <code>MiSnapFacialCaptureReviewMode</code>
///   </li>
/// </ul>
@property (nonatomic) enum MiSnapFacialCaptureReviewMode reviewMode;
/// Indicates whether landmarks show be displayed for debugging purposes
@property (nonatomic) BOOL showLandmarks;
/// Indicates whether a session should seamlessly failover to Manual instead of presenting a Timeour/Failover screen
@property (nonatomic) BOOL seamlessFailover;
/// Indicates whether a shutter sound should be played upon a successful image acquistion
@property (nonatomic) BOOL playShutterShound;
/// Indicates whether MiSnapFacialCaptureViewController should be automatically dismissed or
/// will be dismissed by a presenting view controller
@property (nonatomic) BOOL autoDismiss;
/// Indicates whether accessibility is enabled
@property (nonatomic) BOOL accessibilityEnabled;
/// Time to delay ending of a session after a successful image acquisition (sec)
/// Range: 1.5…10
/// Default: 1.5
@property (nonatomic) NSTimeInterval terminationDelay;
/// Timeout (sec)
/// Range: 0…30
/// Default: 20
@property (nonatomic) NSTimeInterval timeout;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates and returns default UX parameters for a provided flow
- (nonnull instancetype)initFor:(enum MiSnapFaceCaptureFlow)flow OBJC_DESIGNATED_INITIALIZER;
/// UX parameters dictionary representation
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull dictionary;
/// Description of <code>MiSnapFacialCaptureUXParameters</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSCoder;
@protocol MiSnapFacialCaptureViewControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;

/// A view controller that controls an invoked session
SWIFT_CLASS("_TtC21MiSnapFacialCaptureUX33MiSnapFacialCaptureViewController")
@interface MiSnapFacialCaptureViewController : UIViewController
/// A configuration a session was initialized with
@property (nonatomic, readonly, strong) MiSnapFacialCaptureConfiguration * _Nonnull configuration;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Creates and returns view controller with a given configuration and sets a delegate that’ll be receiving callbacks
- (nonnull instancetype)initWith:(MiSnapFacialCaptureConfiguration * _Nonnull)configuration delegate:(id <MiSnapFacialCaptureViewControllerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// Updates UX and/or SDK parameters
- (void)update:(MiSnapFacialCaptureUXParameters * _Nullable)uxParameters :(MiSnapFacialCaptureParameters * _Nullable)parameters;
/// Cleans up all internal objects to prevent a memory leak
- (void)shutdown;
/// Called after the view has been loaded.
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewDidLoad;
/// Called when the view is about to made visible
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewWillAppear:(BOOL)animated;
/// Called when the view has been fully transitioned onto the screen
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewDidAppear:(BOOL)animated;
/// Called when the view is dismissed, covered or otherwise hidden
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewWillDisappear:(BOOL)animated;
/// Called when the view’s size is changed by its parent
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// Indicates whether a status bar should be hidden
/// note:
/// Only exposed due to public status of parent’s property. Do not override it.
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Returns orientations supported by the view controller
/// note:
/// Only exposed due to public status of parent’s property. Do not override it.
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface MiSnapFacialCaptureViewController (SWIFT_EXTENSION(MiSnapFacialCaptureUX)) <MiSnapFacialCaptureTutorialViewControllerDelegate>
/// Called when a tutorial view controller’s cancel button is pressed
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)tutorialCancelButtonAction;
/// Called when a tutorial view controller’s continue button is pressed
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)tutorialContinueButtonActionFor:(MiSnapFacialCaptureTutorialMode)tutorialMode;
/// Called when a tutorial view controller’s retry button is pressed
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)tutorialRetryButtonAction;
@end

@class NSData;

@interface MiSnapFacialCaptureViewController (SWIFT_EXTENSION(MiSnapFacialCaptureUX)) <MiSnapFacialCaptureCameraDelegate>
/// Called when a camera is configured and ready to be started
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)didFinishConfiguringSession;
/// Called when a camera received a sample buffer
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)didReceiveSampleBuffer:(CMSampleBufferRef _Nullable)sampleBuffer;
/// Called when a camera finished recording a video
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)didFinishRecordingVideo:(NSData * _Nullable)videoData;
@end




@interface MiSnapFacialCaptureViewController (SWIFT_EXTENSION(MiSnapFacialCaptureUX))
/// Convenience function to present another view controller as a child view controller
- (void)presentVC:(UIViewController * _Nonnull)vc;
@end

@class MiSnapFacialCaptureResult;

@interface MiSnapFacialCaptureViewController (SWIFT_EXTENSION(MiSnapFacialCaptureUX)) <MiSnapFacialCaptureAnalyzerDelegate>
/// Called when an analyzer detects an invalid license
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerLicenseStatus:(enum MiSnapLicenseStatus)status;
/// Called when an analyzer detects a frame that fails one or more Image Quality Analysis checks
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerError:(MiSnapFacialCaptureResult * _Null_unspecified)result;
/// Called when an analyzer detects a frame that passes all Image Quality Analysis checks
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerSuccess:(MiSnapFacialCaptureResult * _Null_unspecified)result;
/// Called when an analyzer is cancelled
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerCancelled:(MiSnapFacialCaptureResult * _Null_unspecified)result;
/// Called when a device supports manual only mode (iOS < 12.0)
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerManualOnly;
/// Called when an analyzer detected a frame that passes all IQA checks so that a countown can be started
/// when <code>selectOnSmile</code> is set to <code>false</code> in <code>MiSnapFacialCaptureParameters</code>
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapFacialCaptureAnalyzerStartCountdown;
@end



/// Defines an interface for delegates of <code>MiSnapFacialCaptureViewController</code> to receive callbacks
SWIFT_PROTOCOL("_TtP21MiSnapFacialCaptureUX41MiSnapFacialCaptureViewControllerDelegate_")
@protocol MiSnapFacialCaptureViewControllerDelegate
/// Delegates receive this callback only when license status is anything but valid
- (void)miSnapFacialCaptureLicenseStatus:(enum MiSnapLicenseStatus)status;
/// Delegates receive this callback in one of the following cases:
/// <ul>
///   <li>
///     a frame passes Image Quality Analysis (IQA) check in <code>MiSnapFacialCaptureModeAuto</code>
///   </li>
///   <li>
///     a user manually triggers image acqusition
///   </li>
/// </ul>
- (void)miSnapFacialCaptureSuccess:(MiSnapFacialCaptureResult * _Nonnull)result;
/// Delegates receive this callback whenever a user cancels a session
- (void)miSnapFacialCaptureCancelled:(MiSnapFacialCaptureResult * _Nonnull)result;
@optional
/// Delegates receive this callback when a user presses help button and <code>showHelpScreen</code> is overridden to <code>false</code> in <code>MiSnapUxParameters</code>
/// note:
/// It’s optional
- (void)miSnapFacialCaptureHelpAction;
/// Delegates receive this callback when a session times out and <code>showTimeoutScreen</code> is overridden to <code>false</code> in <code>MiSnapUxParameters</code>
/// note:
/// It’s optional
- (void)miSnapFacialCaptureTimeoutAction;
/// Delegates receive this callback when a camera finishes recording a video when <code>recordVideo</code> is overridden to <code>true</code> in <code>MiSnapCameraParameters</code>
/// note:
/// It’s optional
- (void)miSnapFacialCaptureDidFinishRecordingVideo:(NSData * _Nullable)videoData;
/// Delegates receive this callback when a session is completed and ready to be dissmised and <code>autoDismiss</code> is overridden to <code>false</code> in <code>MiSnapUxParameters</code>
/// note:
/// It’s optional
- (void)miSnapFacialCaptureShouldBeDismissed;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
