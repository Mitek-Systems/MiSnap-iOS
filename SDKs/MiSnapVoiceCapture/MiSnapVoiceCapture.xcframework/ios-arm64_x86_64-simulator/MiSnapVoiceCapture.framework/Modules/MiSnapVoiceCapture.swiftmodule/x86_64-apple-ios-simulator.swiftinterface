// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MiSnapVoiceCapture
import AVFoundation
import MiSnapLicenseManager
import MiSnapMibiData
@_exported import MiSnapVoiceCapture
import Swift
import UIKit
import _Concurrency
@objc public enum MiSnapVoiceCaptureStatus : Swift.Int {
  case none = 0
  case tooNoisy = 1
  case tooShort = 2
  case good = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MiSnapVoiceCaptureResult : ObjectiveC.NSObject {
  @objc public var data: Foundation.Data? {
    get
  }
  @objc public var status: MiSnapVoiceCaptureStatus {
    get
  }
  @objc public var speechLength: Swift.Float {
    get
  }
  @objc public var snr: Swift.Float {
    get
  }
  @objc public var mibiString: Swift.String? {
    get
  }
  @objc public var error: Foundation.NSError? {
    get
  }
  @objc override dynamic public init()
  @objc public static func stringFromStatus(_ status: MiSnapVoiceCaptureStatus) -> Swift.String
  @objc deinit
}
@objc public enum MiSnapVoiceCaptureAnalyzerInterruptionReason : Swift.Int {
  case none
  case notActive
  case noise
  case voiceOver
  case micInUseByAnotherClient
  case mediaReset
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MiSnapVoiceCaptureAnalyzerDelegate {
  @objc func miSnapVoiceCaptureAnalyzerLicenseStatus(_ status: MiSnapLicenseStatus)
  @objc func miSnapVoiceCaptureAnalyzerDidStart()
  @objc func miSnapVoiceCaptureAnalyzerDidStop(_ speechStart: Swift.Float)
  @objc func miSnapVoiceCaptureAnalyzerSuccess(_ result: MiSnapVoiceCaptureResult)
  @objc func miSnapVoiceCaptureAnalyzerFailure(_ result: MiSnapVoiceCaptureResult)
  @objc func miSnapVoiceCaptureAnalyzerCancel(_ result: MiSnapVoiceCaptureResult)
  @objc func miSnapVoiceCaptureAnalyzerError(_ result: MiSnapVoiceCaptureResult)
  @objc func miSnapVoiceCaptureAnalyzerSpeechLength(_ speechLength: Swift.Int)
}
@objc public class MiSnapVoiceCaptureAnalyzer : ObjectiveC.NSObject {
  @objc public init(with parameters: MiSnapVoiceCaptureParameters, delegate: MiSnapVoiceCaptureAnalyzerDelegate, sampleRate: Swift.Int32)
  @objc public func start()
  @objc public func discard(for reason: MiSnapVoiceCaptureAnalyzerInterruptionReason, restart: Swift.Bool = false)
  @objc public func analyze(realTimeData data: Foundation.Data)
  @objc public func analyze(fileAt url: Foundation.URL)
  @objc public func didReceiveError(_ error: Foundation.NSError)
  @objc public func cancel()
  @objc public func shutdown()
  @objc public func logModule(named name: Swift.String, version: Swift.String)
  @objc deinit
}
@objc public enum MiSnapVoiceCaptureFlow : Swift.Int {
  case enrollment = 0
  case verification = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MiSnapVoiceCaptureParameters : ObjectiveC.NSObject {
  @objc public var flow: MiSnapVoiceCaptureFlow {
    get
  }
  @objc public var speechLengthMin: Swift.Float
  @objc public var silenceLengthMax: Swift.Float
  @objc public var snrMin: Swift.Float
  @objc public init(for flow: MiSnapVoiceCaptureFlow)
  @objc public static func string(from flow: MiSnapVoiceCaptureFlow) -> Swift.String
  @objc deinit
}
@objc public protocol MiSnapVoiceCaptureRecorderDelegate {
  @objc func miSnapVoiceCaptureRecorderDidStart()
  @objc func miSnapVoiceCaptureRecorderDidOutput(_ data: Foundation.Data)
  @objc func miSnapVoiceCaptureRecorderDidStop(_ url: Foundation.URL)
  @objc func miSnapVoiceCaptureRecorderError(_ error: Foundation.NSError)
  @objc func miSnapVoiceCaptureRecorderInterruptionStarted(_ reason: MiSnapVoiceCaptureAnalyzerInterruptionReason)
  @objc func miSnapVoiceCaptureRecorderInterruptionEnded()
}
@objc public class MiSnapVoiceCaptureRecorder : ObjectiveC.NSObject {
  @objc public var sampleRate: Swift.Int32 {
    get
  }
  @objc public init(with delegate: MiSnapVoiceCaptureRecorderDelegate)
  @objc public func start()
  @objc public func stop(withSpeechStart speechStart: Swift.Float = 0.0)
  @objc public func shutdown()
  @objc deinit
}
extension MiSnapVoiceCaptureStatus : Swift.Equatable {}
extension MiSnapVoiceCaptureStatus : Swift.Hashable {}
extension MiSnapVoiceCaptureStatus : Swift.RawRepresentable {}
extension MiSnapVoiceCaptureAnalyzerInterruptionReason : Swift.Equatable {}
extension MiSnapVoiceCaptureAnalyzerInterruptionReason : Swift.Hashable {}
extension MiSnapVoiceCaptureAnalyzerInterruptionReason : Swift.RawRepresentable {}
extension MiSnapVoiceCaptureFlow : Swift.Equatable {}
extension MiSnapVoiceCaptureFlow : Swift.Hashable {}
extension MiSnapVoiceCaptureFlow : Swift.RawRepresentable {}
