#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef MISNAPVOICECAPTUREUX_SWIFT_H
#define MISNAPVOICECAPTUREUX_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import MiSnapLicenseManager;
@import MiSnapVoiceCapture;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MiSnapVoiceCaptureUX",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSBundle;
@class NSString;

/// Asset location configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX44MiSnapVoiceCaptureAssetLocationConfiguration")
@interface MiSnapVoiceCaptureAssetLocationConfiguration : NSObject
/// Bundle where image assets are located
@property (nonatomic, strong) NSBundle * _Nonnull bundle;
/// Description of <code>MiSnapVoiceCaptureAssetLocationConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MiSnapVoiceCaptureParameters;
@class MiSnapVoiceCaptureUXParameters;
@class MiSnapVoiceCapturePhraseSelectionConfiguration;
@class MiSnapVoiceCaptureIntroductoryInstructionConfiguration;
@class MiSnapVoiceCaptureRecordingConfiguration;
@class MiSnapVoiceCaptureLocalizationConfiguration;

/// A session  configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX31MiSnapVoiceCaptureConfiguration")
@interface MiSnapVoiceCaptureConfiguration : NSObject
/// SDK parameters
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureParameters * _Nonnull parameters;
/// UX parameters
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureUXParameters * _Nonnull uxParameters;
/// Phrase selection screen
@property (nonatomic, readonly, strong) MiSnapVoiceCapturePhraseSelectionConfiguration * _Nonnull phraseSelection;
/// Tutorial screen
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureIntroductoryInstructionConfiguration * _Nonnull introductoryInstruction;
/// Recording screen
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureRecordingConfiguration * _Nonnull recording;
/// Creates and returns configuration object with default UX configuration.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns default configuration for a given flow
- (nonnull instancetype)initFor:(enum MiSnapVoiceCaptureFlow)flow phrase:(NSString * _Nullable)phrase OBJC_DESIGNATED_INITIALIZER;
/// Convenience function for SDK parameters customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomParametersWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureParameters * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for UX parameters customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomUxParametersWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureUXParameters * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Phrase selection screen customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomPhraseSelectionWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCapturePhraseSelectionConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Tutorial screen customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomIntroductoryInstructionWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureIntroductoryInstructionConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Recording screen customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomRecordingWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureRecordingConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Localization customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomLocalizationWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureLocalizationConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Asset location customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomAssetLocationWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureAssetLocationConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for applying UX customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)applying:(MiSnapVoiceCaptureConfiguration * _Nonnull)template_ SWIFT_WARN_UNUSED_RESULT;
/// Description of <code>MiSnapVoiceCaptureConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MiSnapLabelConfiguration;

/// An introductory instruction screen buttons configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX61MiSnapVoiceCaptureIntroductoryInstructionButtonsConfiguration")
@interface MiSnapVoiceCaptureIntroductoryInstructionButtonsConfiguration : NSObject
/// Configuration for a Start recording button at the bottom
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull proceed;
/// Creates and returns a phrase selection configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class UIColor;

/// An introductory instruction screen configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX54MiSnapVoiceCaptureIntroductoryInstructionConfiguration")
@interface MiSnapVoiceCaptureIntroductoryInstructionConfiguration : NSObject
/// Background color
/// Default: <code>.systemBackground</code> for iOS >= 13  and <code>.white</code> for the rest
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Configuration for instructions presented underneath an image
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull message;
/// Configuration for buttons
@property (nonatomic, strong) MiSnapVoiceCaptureIntroductoryInstructionButtonsConfiguration * _Nonnull buttons;
/// Creates and returns tutorial configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Localization configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX43MiSnapVoiceCaptureLocalizationConfiguration")
@interface MiSnapVoiceCaptureLocalizationConfiguration : NSObject
/// Bundle where localizable files are located
@property (nonatomic, strong) NSBundle * _Nonnull bundle;
/// Localizable file name
@property (nonatomic, copy) NSString * _Nonnull stringsName;
/// Description of <code>MiSnapVoiceCaptureLocalizationConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A phrase selection buttons configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX53MiSnapVoiceCapturePhraseSelectionButtonsConfiguration")
@interface MiSnapVoiceCapturePhraseSelectionButtonsConfiguration : NSObject
/// Configuration for a Continue button at the bottom
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull proceed;
/// Creates and returns a phrase selection configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// A phrase selection screen  configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX46MiSnapVoiceCapturePhraseSelectionConfiguration")
@interface MiSnapVoiceCapturePhraseSelectionConfiguration : NSObject
/// Background color
/// Default: <code>.systemBackground</code> for iOS >= 13  and <code>.white</code> for the rest
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Configuration for a message at the top
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull message;
/// Configuration for a phase in a list
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull phrase;
/// Configuration for buttons
@property (nonatomic, strong) MiSnapVoiceCapturePhraseSelectionButtonsConfiguration * _Nonnull buttons;
/// Creates and returns a phrase selection configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// A recording screen buttons configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX47MiSnapVoiceCaptureRecordingButtonsConfiguration")
@interface MiSnapVoiceCaptureRecordingButtonsConfiguration : NSObject
/// Configuration for Cancel button at the top
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull cancel;
/// Configuration for Failure acknowledgment button
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull failureAcknowledgment;
/// Creates and returns a phrase selection configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MiSnapVoiceCaptureNeutralViewConfiguration;
@class MiSnapVoiceCaptureSuccessViewConfiguration;
@class MiSnapVoiceCaptureFailureViewConfiguration;

/// A recording screen configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX40MiSnapVoiceCaptureRecordingConfiguration")
@interface MiSnapVoiceCaptureRecordingConfiguration : NSObject
/// Background color
/// Default: <code>.systemBackground</code> for iOS >= 13  and <code>.white</code> for the rest
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Neutral view configuration
@property (nonatomic, strong) MiSnapVoiceCaptureNeutralViewConfiguration * _Nonnull neutral;
/// Success view configuration
@property (nonatomic, strong) MiSnapVoiceCaptureSuccessViewConfiguration * _Nonnull success;
/// Failure view configuration
@property (nonatomic, strong) MiSnapVoiceCaptureFailureViewConfiguration * _Nonnull failure;
/// Configuration for a message that’s located above the prase
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull message;
/// Configuration for a phrase
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull phrase;
/// Configuration for a failure message
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull failureMessage;
/// Configuration for buttons
@property (nonatomic, strong) MiSnapVoiceCaptureRecordingButtonsConfiguration * _Nonnull buttons;
/// Creates and returns tutorial configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// UX parameters used during voice recording process
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX30MiSnapVoiceCaptureUXParameters")
@interface MiSnapVoiceCaptureUXParameters : NSObject
/// Indicates whether an introductory instruction screen should be presented
/// Default: <code>true</code>
@property (nonatomic) BOOL showIntroductoryInstructionScreen;
/// Indicates whether MiSnapVoiceCaptureViewController should be automatically dismissed or
/// will be dismissed by a presenting view controller
/// Default: <code>true</code>
@property (nonatomic) BOOL autoDismiss;
/// A phrase to be used in a flow
@property (nonatomic, readonly, copy) NSString * _Nullable phrase;
/// Initializes parameters for a flow (see <code>MiSnapVoiceCaptureFlow</code>) with an optional phrase
/// note:
/// a <code>phrase</code> is required for <code>verification</code> flow. A <code>miSnapVoiceCaptureError(_:)</code> callback is returned if it’s not provided.
/// note:
/// a <code>phrase</code> is optional for <code>enrollment</code> flow. When phrase is not provided a Phrase selection screen is presented to a user (recommended).
/// If a phrase is provided then Phrase selection screen is skipped (not recommended).
- (nonnull instancetype)initFor:(enum MiSnapVoiceCaptureFlow)flow phrase:(NSString * _Nullable)phrase OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;
@protocol MiSnapVoiceCaptureViewControllerDelegate;

/// A view controller that controls an invoked session
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX32MiSnapVoiceCaptureViewController")
@interface MiSnapVoiceCaptureViewController : UIViewController
/// A configuration a session was initialized with
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureConfiguration * _Nonnull configuration;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Initializes a view controller with parameters and a delegate
- (nonnull instancetype)initWith:(MiSnapVoiceCaptureConfiguration * _Nonnull)configuration delegate:(id <MiSnapVoiceCaptureViewControllerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// Checks a microphone permission and asynchronously returns a result
+ (void)checkMicrophonePermissionWithHandler:(void (^ _Nonnull)(BOOL))handler;
/// Checks if a device has a given space in MB
+ (BOOL)hasMinDiskSpace:(NSInteger)minDiskSpace SWIFT_WARN_UNUSED_RESULT;
/// Called after the view has been loaded.
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewDidLoad;
/// Called when the view is about to made visible
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewWillAppear:(BOOL)animated;
/// Indicates whether a status bar should be hidden
/// note:
/// Only exposed due to public status of parent’s property. Do not override it.
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Returns orientations supported by the view controller
/// note:
/// Only exposed due to public status of parent’s property. Do not override it.
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end





@class UITraitCollection;

@interface MiSnapVoiceCaptureViewController (SWIFT_EXTENSION(MiSnapVoiceCaptureUX))
/// Called when the environment’s traits change.
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end

@class MiSnapVoiceCaptureResult;

@interface MiSnapVoiceCaptureViewController (SWIFT_EXTENSION(MiSnapVoiceCaptureUX)) <MiSnapVoiceCaptureControllerDelegate>
/// Called when license status is anything but valid
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerLicenseStatus:(MiSnapLicenseStatus)status;
/// Called when a controller is started
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerDidStart;
/// Called when a recording passes all quality checks
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerSuccess:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Called when a session is cancelled by a user
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerFailure:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Called when an SDK error occurs
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerError:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Called when a session is cancelled by a user
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerCancel:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Called when a controller is interrupted
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerInterruptionStarted:(enum MiSnapVoiceCaptureControllerInterruptionReason)reason;
/// Called when a controller interruption has ended
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerInterruptionEnded;
/// Called every time a real-time voice data is processed with a speech length detected in the current recording
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerSpeechLength:(NSInteger)speechLength;
@end



/// Defines an interface for delegates of <code>MiSnapVoiceCaptureViewController</code> to receive recording result
SWIFT_PROTOCOL("_TtP20MiSnapVoiceCaptureUX40MiSnapVoiceCaptureViewControllerDelegate_")
@protocol MiSnapVoiceCaptureViewControllerDelegate
/// Delegates receive this callback only when license status is anything but valid
- (void)miSnapVoiceCaptureLicenseStatus:(MiSnapLicenseStatus)status;
/// Delegates receive this callback when a user selects a phrase on a Phrase selection screen
- (void)miSnapVoiceCaptureDidSelectPhrase:(NSString * _Nonnull)phrase;
/// Delegates receive this callback when all voice sample are successfully recorded for a given flow
- (void)miSnapVoiceCaptureSuccess:(NSArray<MiSnapVoiceCaptureResult *> * _Nonnull)results for:(enum MiSnapVoiceCaptureFlow)flow;
/// Delegates receive this callback whenever a user cancels a session
- (void)miSnapVoiceCaptureCancelled:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Delegates receive this callback when an internal SDK error occurs
- (void)miSnapVoiceCaptureError:(MiSnapVoiceCaptureResult * _Nonnull)result;
@optional
/// Delegates receive this callback when a session is completed and ready to be dissmised and <code>autoDismiss</code> is overridden to <code>false</code> in <code>MiSnapVoiceCaptureUXParameters</code>
/// note:
/// It’s optional
- (void)miSnapVoiceCaptureShouldBeDismissed;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef MISNAPVOICECAPTUREUX_SWIFT_H
#define MISNAPVOICECAPTUREUX_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import MiSnapLicenseManager;
@import MiSnapVoiceCapture;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MiSnapVoiceCaptureUX",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSBundle;
@class NSString;

/// Asset location configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX44MiSnapVoiceCaptureAssetLocationConfiguration")
@interface MiSnapVoiceCaptureAssetLocationConfiguration : NSObject
/// Bundle where image assets are located
@property (nonatomic, strong) NSBundle * _Nonnull bundle;
/// Description of <code>MiSnapVoiceCaptureAssetLocationConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MiSnapVoiceCaptureParameters;
@class MiSnapVoiceCaptureUXParameters;
@class MiSnapVoiceCapturePhraseSelectionConfiguration;
@class MiSnapVoiceCaptureIntroductoryInstructionConfiguration;
@class MiSnapVoiceCaptureRecordingConfiguration;
@class MiSnapVoiceCaptureLocalizationConfiguration;

/// A session  configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX31MiSnapVoiceCaptureConfiguration")
@interface MiSnapVoiceCaptureConfiguration : NSObject
/// SDK parameters
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureParameters * _Nonnull parameters;
/// UX parameters
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureUXParameters * _Nonnull uxParameters;
/// Phrase selection screen
@property (nonatomic, readonly, strong) MiSnapVoiceCapturePhraseSelectionConfiguration * _Nonnull phraseSelection;
/// Tutorial screen
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureIntroductoryInstructionConfiguration * _Nonnull introductoryInstruction;
/// Recording screen
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureRecordingConfiguration * _Nonnull recording;
/// Creates and returns configuration object with default UX configuration.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates and returns default configuration for a given flow
- (nonnull instancetype)initFor:(enum MiSnapVoiceCaptureFlow)flow phrase:(NSString * _Nullable)phrase OBJC_DESIGNATED_INITIALIZER;
/// Convenience function for SDK parameters customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomParametersWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureParameters * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for UX parameters customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomUxParametersWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureUXParameters * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Phrase selection screen customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomPhraseSelectionWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCapturePhraseSelectionConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Tutorial screen customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomIntroductoryInstructionWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureIntroductoryInstructionConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Recording screen customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomRecordingWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureRecordingConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Localization customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomLocalizationWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureLocalizationConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for Asset location customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)withCustomAssetLocationWithCompletion:(SWIFT_NOESCAPE void (^ _Nonnull)(MiSnapVoiceCaptureAssetLocationConfiguration * _Nonnull))completion SWIFT_WARN_UNUSED_RESULT;
/// Convenience function for applying UX customization
- (MiSnapVoiceCaptureConfiguration * _Nonnull)applying:(MiSnapVoiceCaptureConfiguration * _Nonnull)template_ SWIFT_WARN_UNUSED_RESULT;
/// Description of <code>MiSnapVoiceCaptureConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MiSnapLabelConfiguration;

/// An introductory instruction screen buttons configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX61MiSnapVoiceCaptureIntroductoryInstructionButtonsConfiguration")
@interface MiSnapVoiceCaptureIntroductoryInstructionButtonsConfiguration : NSObject
/// Configuration for a Start recording button at the bottom
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull proceed;
/// Creates and returns a phrase selection configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class UIColor;

/// An introductory instruction screen configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX54MiSnapVoiceCaptureIntroductoryInstructionConfiguration")
@interface MiSnapVoiceCaptureIntroductoryInstructionConfiguration : NSObject
/// Background color
/// Default: <code>.systemBackground</code> for iOS >= 13  and <code>.white</code> for the rest
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Configuration for instructions presented underneath an image
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull message;
/// Configuration for buttons
@property (nonatomic, strong) MiSnapVoiceCaptureIntroductoryInstructionButtonsConfiguration * _Nonnull buttons;
/// Creates and returns tutorial configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Localization configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX43MiSnapVoiceCaptureLocalizationConfiguration")
@interface MiSnapVoiceCaptureLocalizationConfiguration : NSObject
/// Bundle where localizable files are located
@property (nonatomic, strong) NSBundle * _Nonnull bundle;
/// Localizable file name
@property (nonatomic, copy) NSString * _Nonnull stringsName;
/// Description of <code>MiSnapVoiceCaptureLocalizationConfiguration</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A phrase selection buttons configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX53MiSnapVoiceCapturePhraseSelectionButtonsConfiguration")
@interface MiSnapVoiceCapturePhraseSelectionButtonsConfiguration : NSObject
/// Configuration for a Continue button at the bottom
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull proceed;
/// Creates and returns a phrase selection configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// A phrase selection screen  configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX46MiSnapVoiceCapturePhraseSelectionConfiguration")
@interface MiSnapVoiceCapturePhraseSelectionConfiguration : NSObject
/// Background color
/// Default: <code>.systemBackground</code> for iOS >= 13  and <code>.white</code> for the rest
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Configuration for a message at the top
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull message;
/// Configuration for a phase in a list
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull phrase;
/// Configuration for buttons
@property (nonatomic, strong) MiSnapVoiceCapturePhraseSelectionButtonsConfiguration * _Nonnull buttons;
/// Creates and returns a phrase selection configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// A recording screen buttons configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX47MiSnapVoiceCaptureRecordingButtonsConfiguration")
@interface MiSnapVoiceCaptureRecordingButtonsConfiguration : NSObject
/// Configuration for Cancel button at the top
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull cancel;
/// Configuration for Failure acknowledgment button
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull failureAcknowledgment;
/// Creates and returns a phrase selection configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MiSnapVoiceCaptureNeutralViewConfiguration;
@class MiSnapVoiceCaptureSuccessViewConfiguration;
@class MiSnapVoiceCaptureFailureViewConfiguration;

/// A recording screen configuration
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX40MiSnapVoiceCaptureRecordingConfiguration")
@interface MiSnapVoiceCaptureRecordingConfiguration : NSObject
/// Background color
/// Default: <code>.systemBackground</code> for iOS >= 13  and <code>.white</code> for the rest
/// Used in both Light and Dark modes if <code>backgroundColorDarkMode</code> is not set. Otherwise, used in Light mode only
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Background color in Dark mode
/// Default: not set
/// When this color is set then it’s used in Dark mode
@property (nonatomic, strong) UIColor * _Nullable backgroundColorDarkMode;
/// Neutral view configuration
@property (nonatomic, strong) MiSnapVoiceCaptureNeutralViewConfiguration * _Nonnull neutral;
/// Success view configuration
@property (nonatomic, strong) MiSnapVoiceCaptureSuccessViewConfiguration * _Nonnull success;
/// Failure view configuration
@property (nonatomic, strong) MiSnapVoiceCaptureFailureViewConfiguration * _Nonnull failure;
/// Configuration for a message that’s located above the prase
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull message;
/// Configuration for a phrase
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull phrase;
/// Configuration for a failure message
@property (nonatomic, strong) MiSnapLabelConfiguration * _Nonnull failureMessage;
/// Configuration for buttons
@property (nonatomic, strong) MiSnapVoiceCaptureRecordingButtonsConfiguration * _Nonnull buttons;
/// Creates and returns tutorial configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// UX parameters used during voice recording process
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX30MiSnapVoiceCaptureUXParameters")
@interface MiSnapVoiceCaptureUXParameters : NSObject
/// Indicates whether an introductory instruction screen should be presented
/// Default: <code>true</code>
@property (nonatomic) BOOL showIntroductoryInstructionScreen;
/// Indicates whether MiSnapVoiceCaptureViewController should be automatically dismissed or
/// will be dismissed by a presenting view controller
/// Default: <code>true</code>
@property (nonatomic) BOOL autoDismiss;
/// A phrase to be used in a flow
@property (nonatomic, readonly, copy) NSString * _Nullable phrase;
/// Initializes parameters for a flow (see <code>MiSnapVoiceCaptureFlow</code>) with an optional phrase
/// note:
/// a <code>phrase</code> is required for <code>verification</code> flow. A <code>miSnapVoiceCaptureError(_:)</code> callback is returned if it’s not provided.
/// note:
/// a <code>phrase</code> is optional for <code>enrollment</code> flow. When phrase is not provided a Phrase selection screen is presented to a user (recommended).
/// If a phrase is provided then Phrase selection screen is skipped (not recommended).
- (nonnull instancetype)initFor:(enum MiSnapVoiceCaptureFlow)flow phrase:(NSString * _Nullable)phrase OBJC_DESIGNATED_INITIALIZER;
/// Description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;
@protocol MiSnapVoiceCaptureViewControllerDelegate;

/// A view controller that controls an invoked session
SWIFT_CLASS("_TtC20MiSnapVoiceCaptureUX32MiSnapVoiceCaptureViewController")
@interface MiSnapVoiceCaptureViewController : UIViewController
/// A configuration a session was initialized with
@property (nonatomic, readonly, strong) MiSnapVoiceCaptureConfiguration * _Nonnull configuration;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Initializes a view controller with parameters and a delegate
- (nonnull instancetype)initWith:(MiSnapVoiceCaptureConfiguration * _Nonnull)configuration delegate:(id <MiSnapVoiceCaptureViewControllerDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
/// Checks a microphone permission and asynchronously returns a result
+ (void)checkMicrophonePermissionWithHandler:(void (^ _Nonnull)(BOOL))handler;
/// Checks if a device has a given space in MB
+ (BOOL)hasMinDiskSpace:(NSInteger)minDiskSpace SWIFT_WARN_UNUSED_RESULT;
/// Called after the view has been loaded.
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewDidLoad;
/// Called when the view is about to made visible
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)viewWillAppear:(BOOL)animated;
/// Indicates whether a status bar should be hidden
/// note:
/// Only exposed due to public status of parent’s property. Do not override it.
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// Returns orientations supported by the view controller
/// note:
/// Only exposed due to public status of parent’s property. Do not override it.
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end





@class UITraitCollection;

@interface MiSnapVoiceCaptureViewController (SWIFT_EXTENSION(MiSnapVoiceCaptureUX))
/// Called when the environment’s traits change.
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end

@class MiSnapVoiceCaptureResult;

@interface MiSnapVoiceCaptureViewController (SWIFT_EXTENSION(MiSnapVoiceCaptureUX)) <MiSnapVoiceCaptureControllerDelegate>
/// Called when license status is anything but valid
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerLicenseStatus:(MiSnapLicenseStatus)status;
/// Called when a controller is started
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerDidStart;
/// Called when a recording passes all quality checks
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerSuccess:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Called when a session is cancelled by a user
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerFailure:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Called when an SDK error occurs
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerError:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Called when a session is cancelled by a user
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerCancel:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Called when a controller is interrupted
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerInterruptionStarted:(enum MiSnapVoiceCaptureControllerInterruptionReason)reason;
/// Called when a controller interruption has ended
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerInterruptionEnded;
/// Called every time a real-time voice data is processed with a speech length detected in the current recording
/// note:
/// Only exposed due to public status of parent’s function. Do not call it.
- (void)miSnapVoiceCaptureControllerSpeechLength:(NSInteger)speechLength;
@end



/// Defines an interface for delegates of <code>MiSnapVoiceCaptureViewController</code> to receive recording result
SWIFT_PROTOCOL("_TtP20MiSnapVoiceCaptureUX40MiSnapVoiceCaptureViewControllerDelegate_")
@protocol MiSnapVoiceCaptureViewControllerDelegate
/// Delegates receive this callback only when license status is anything but valid
- (void)miSnapVoiceCaptureLicenseStatus:(MiSnapLicenseStatus)status;
/// Delegates receive this callback when a user selects a phrase on a Phrase selection screen
- (void)miSnapVoiceCaptureDidSelectPhrase:(NSString * _Nonnull)phrase;
/// Delegates receive this callback when all voice sample are successfully recorded for a given flow
- (void)miSnapVoiceCaptureSuccess:(NSArray<MiSnapVoiceCaptureResult *> * _Nonnull)results for:(enum MiSnapVoiceCaptureFlow)flow;
/// Delegates receive this callback whenever a user cancels a session
- (void)miSnapVoiceCaptureCancelled:(MiSnapVoiceCaptureResult * _Nonnull)result;
/// Delegates receive this callback when an internal SDK error occurs
- (void)miSnapVoiceCaptureError:(MiSnapVoiceCaptureResult * _Nonnull)result;
@optional
/// Delegates receive this callback when a session is completed and ready to be dissmised and <code>autoDismiss</code> is overridden to <code>false</code> in <code>MiSnapVoiceCaptureUXParameters</code>
/// note:
/// It’s optional
- (void)miSnapVoiceCaptureShouldBeDismissed;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
